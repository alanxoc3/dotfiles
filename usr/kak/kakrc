set-option global startup_info_version 99999999 # Hacky way to disable the startup message on the scratch screen.
set-option global ui_options terminal_assistant=none terminal_enable_mouse=false

# user mode
map global user y     '<a-|> ccl<ret>'                   -docstring 'clipboard copy'
map global user x     '<|> ccl<ret>'                     -docstring 'clipboard cut'
map global user P     '<!> pcl<ret>'                     -docstring 'clipboard insert'
map global user p     '<a-!> pcl<ret>'                   -docstring 'clipboard append'
map global user r     '<|> pcl<ret>'                     -docstring 'clipboard replace'
map global user f     ': enter-user-mode fzf-mode<ret>'  -docstring 'enter fzf-mode'
map global user t     ': enter-user-mode text-mode<ret>' -docstring 'enter text-mode'
map global user N     ': bn<ret>'                        -docstring 'next buffer'
map global user n     ': bp<ret>'                        -docstring 'prev buffer'
map global user d     ': db<ret>'                        -docstring 'delete buffer'
map global user s     ': e -scratch<ret>'                -docstring 'new scratch buffer'
map global user /     '/(?i)'                            -docstring 'case insensitive search'
map global user <a-/> '<a-/>(?i)'                        -docstring 'case insensitive backward search'
map global user ?     '?(?i)'                            -docstring 'case insensitive extend search'
map global user <a-?> '<a-?>(?i)'                        -docstring 'case insensitive backward extend-search'

declare-user-mode text-mode # allows mappings to be bound to this
map global text-mode p ': text-mode-format<ret>'                              -docstring 'Format a paragraph to respect the 80 character limit.'
map global text-mode w ': toggle-highlighter global/ wrap -word -indent<ret>' -docstring 'Toggle wrap all buffers.'
map global text-mode n ': toggle-highlighter global/ number-lines<ret>'       -docstring 'Toggle line numbers for all buffers.'
map global text-mode a ': ansi-render<ret>gg'                                 -docstring 'Highlight and remove ANSI color codes.'
map global text-mode A ': ansi-render-selection<ret>'                         -docstring 'Highlight and remove ANSI color codes from selection.'

declare-user-mode fzf-mode
map global fzf-mode r ': fzf-grep<ret>' -docstring 'grep file contents recursively'
map global fzf-mode f ': fzf-file<ret>' -docstring 'open file'

# tab & whitespace configuration
set-option global tabstop 2
set-option global indentwidth 2 # 0 means tab character
set-option global aligntab false

hook global BufCreate .* %{
    hook buffer -group tabspace InsertChar \t %{ execute-keys -draft '<esc>h@' }
    hook buffer BufSetOption indentwidth=0 %{ remove-hooks buffer tabspace }
}

addhl global/ show-whitespaces -tab '‚é∏' -tabpad ' ' -lf ' ' -nbsp ' ' -spc ' '
addhl global/ dynregex "^( {%opt{indentwidth}})+|^(\t)+" 1:,rgb:112222 2:,rgb:112222
addhl global/ regex "[\t ]+$" 0:,bright-red

# lsp stuff to consider enabling...
eval %sh{kak-lsp --kakoune -s $kak_session}
hook global WinSetOption filetype=(rust|python|go|javascript|typescript|vue|c|cpp) %{
  lsp-enable-window
}

# idk... recommended mappings: https://github.com/kak-lsp/kak-lsp
map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object f '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object t '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'
