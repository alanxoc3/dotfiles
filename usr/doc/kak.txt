generated with: -- for f in $(fd '' /usr/share/kak/doc | sort -u); do cat "$f" >> ref.txt; echo >> ref.txt; done

= Buffers

== Commands

To open buffers or navigate through the buffers list see
<<commands#files-and-buffers,`:doc commands files-and-buffers`>>.

== Scratch Buffers

Scratch buffers are useful for volatile data and quick prototyping.
They are not linked to files, so Kakoune does not warn about unsaved
changes at exit, and the `:write` command requires an explicit filename.

One particular scratch buffer, named *\*scratch*\*, is automatically created
when there are no other buffers left in the current session, which is also
the case when Kakoune starts up without any files to open.

A scratch buffer can be created by passing the `-scratch` switch to the
`:edit` command.

== Debug Buffers

Debug buffers are used to gather diagnostics. They have a number of
restrictions compared to regular buffers:

- They are skipped when cycling over the buffers list.
- Their content is not considered for word completions with `word=all`
  completers.
- Hooks are not always run (like the `BufCreate`/`BufClose` hooks).
- Display profiling is disabled.

A specific *\*debug*\* buffer is used by Kakoune to write errors or
warnings.  This is also where the ouput of the `:debug` and the `:echo
-debug` commands will land.

A debug buffer can be created by passing the `-debug` switch to the
`:edit` command.

== FIFO Buffers

The `:edit` command can take a `-fifo` switch:

---------------------------------------------
:edit -fifo <filename> [-scroll] <buffername>
---------------------------------------------

In this case, a buffer named `<buffername>` is created which reads
its content from the FIFO (also called "named pipe") `<filename>`.
When the FIFO is written to, the buffer is automatically updated.

If the `-scroll` switch is specified, the window displaying the buffer
will scroll so that the newest data is always visible.

This is very useful for running some commands asynchronously while
displaying their result in a buffer. See `rc/make.kak` and `rc/grep.kak`
for examples.

When the write end of the FIFO is closed, the buffer becomes an ordinary
<<buffers#scratch-buffers,scratch buffer>>. When the buffer is deleted,
Kakoune closes the read end of the FIFO. Any program writing to the FIFO
will receive `SIGPIPE`, which will terminate the program by default.

= Changelog

This changelog contains major and/or breaking changes to Kakoune between
released versions.

== Kakoune 2022.10.31

* `complete-command` (See <<commands#configuring-command-completion,`:doc commands configuring-command-completion`>>)

* `p`, `P`, `!` and `<a-!>` commands now select the inserted text

* `x` now just extends the selection to contain full lines (as `<a-x>` did)
  `<a-x>` trims partial lines from the selection (as `<a-X>` did)

* User mappings is now bound to `<space>` while keeping/removing main selection
  moved to `,` and `<a-,>`

* Prompt history registers `%reg{colon}`, `%reg{slash}` and `%reg{pipe}` now
  have reverse chronological order

* Executing user mode mappings no longer adds to prompt history registers.

== Kakoune 2021.11.07

* Support for curly and separately colored underlines (undocumented in 2021.10.28)

* Fixes for terminal flickering

* Fixes for command and response fifo corner cases

== Kakoune 2021.10.28

* `g` and `v` do not auto lower case the next key, so `GL` needs to be
  manually mapped to `Gl` for example.

== Kakoune 2021.08.28

* command and response fifo support
  (See <<expansions#command-and-response-fifo,`:doc expansions command-and-response-fifo`>>)

* Shell expansions only trim the last trailing newline instead of all of
  them to make is possible to losslessly pass text through `%sh{...}`. 

* `set-option -remove` support for subtracting/removing from option values

* Menu completions such as command name completion are now auto-inserted on
  space

* `write -atomic` was replaced with `write -method [replace|overwrite]` to
  make both write methods available explicitly

* `write <filename>` will fail if the given filename already exists and is
  a regular file. Use the `-force` switch to override that behaviour.

== Kakoune 2020.09.01

* The `repl` and `send-text` aliases have been renamed respectively into
  `repl-new` and `repl-send-text`.

* Daemon mode (`-d` switch) does not fork anymore.

* Replace NCursesUI with a custom terminal UI implementation

== Kakoune 2020.08.04

* Introduce `User` hook support.

* The `bold` and `italic` faces are no longer built-in. Highlighters
  are expected to use face attributes (`+b` and `+i`, respectively) to
  decorate text.

* The `lint-enable` command no longer needs to be called to display
  linting errors. The `lint-disable` command was renamed into
  `lint-hide-diagnostics`.

* The `+<length>` part of a `range-specs` highlighter consistently
  refers to the length of the target range.

* clients stdin is transferred to the server, making it possible
  to pipe into `kak -c <session>`

* Faces can have an alpha channel, specified using the 
  `rgba:RRGGBBAA` format.

* replace-ranges highlighter now support empty and multi-lines ranges

* `%val{...}` now expands to list of strings, `$kak_quoted_...` now work
  as expected with these.

* `*SetOption` hooks filter string will contain a value only for options
  of int/str/bool types to avoid performance issue with generating those
  on more complex option types. 

== Kakoune 2020.01.16

* Expose history tree through `$kak_history` and
  `$kak_uncommitted_modifications`

* `InsertCompletionHide` parameter is the list of inserted
  ranges

== Kakoune 2019.12.10

* Arrow keys and `<home>`, `<end>` are not normal mode commands
  anymore but default key mappings.
  
* `ModeChange` hook parameter now takes `push:` or `pop:` prefix,
  `InsertBegin`, `InsertEnd`, `NormalBegin` and `NormalEnd`
  were removed.

* `-verbatim` switch in `evaluate-commands` for perfect command
  forwarding to another context.

* `WrapMarker` face used by `wrap -marker` highlighter

* `info` supports markup with the `-markup` switch

* `rename-buffer` gained `-file` and `-scratch` switches
  to support converting buffer types.  

== Kakoune 2019.07.01

* Re-organized bundled script files directory hierarchy.

* Introduced helpers to write/read from file in scripts with
  `%file{...}` expansion and `echo -to-file <filename>`.

* Added `ClientCreate` and `ClientClose` hooks

* `edit -scratch` with no buffer name will create a new
  scratch buffer with a unique autogenerated name.

* `info -placement` is now `info -style` and supports
  `menu` and `modal` additional styles.

* `completions` option type `docstring` are now arbitrary
  kakoune commands that are run on item select.

* `InsertCompletionSelect` hook has been removed as
  `completions` commands now provides a similar feature.

* Introduced a module system using the `provide-module` and
  `require-module` commands that allows for lazily loading language
  support files with dependency resolution.

* Added a new hook `ModuleLoaded` which is run after a module is
  loaded, allowing for module specific configuration.

* Shell quoting of lists is not automatic anymore, `$kak_quoted_...`
  makes it opt-in, and works for all option types.

* Lower case function key syntax is not accepted anymore,
  `<f1>` should be converted to `<F1>`.

== Kakoune 2019.01.20

* `auto_complete` has been renamed to `autocomplete` for more
  consistency.

* Start of a builtin key parser in the ncurses ui bypassing
  the ncurses one. Can be favored by setting the ui option
  `ncurses_builtin_key_parser` to `true`.

* Right clicks extend the current selection, the control modifier allows
  merging all the selections after extension.

* The `regex` highlighter now supports named capture groups to
  ease readability.

== Kakoune 2018.10.27

* `remove-hooks` <group> argument is now a regex and removes all
  hooks whose group matches it.

* `exclusive` face attribute (e) has been replaced with more
  granular `final foreground` (f), `final background` (g), and `final
  attributes` (a), or the three combined as `final` (F).  Semantics
  changed slightly as those attributes apply to the existing face as
  well (a final face will not get modified by a following face if that
  following face does not have the final attribute itself.

* `<a-m>` aka "merge consecutive selections" has been moved to `<a-_>`.
  The new `<a-m>` and `<a-M>` are now symmetrical with `m` and `M`.
  Those commands select (or extend) to the matching char backwards.

* `define-command` switches `-shell-completion` and `-shell-candidates`
  have been renamed to `-shell-script-completion` and
  `-shell-script-candidates` to make way for a new `-shell-completion`
  which completes like the shell (shell command name then filename).

* `asciidoc` is not a dependency anymore, the last file that required
  it (Kakoune's manpage) has been converted to troff format.

== Kakoune 2018.09.04

This version contains a significant overhaul of various Kakoune
features that can break user configuration. This was a necessary
change to make Kakoune command model cleaner and more robust.

* `%sh{...}` strings are not reparsed automatically anymore, they need
  to go through an explicit `evaluate-commands`

* The `-allow-override` switch from `define-command` has been renamed
  `-override`.

* The search prompt uses buffer word completion so that fuzzy completion
  can be used to quickly search for a buffer word.

* The `wrap` highlighter can accept a new `-marker <marker_text>` switch.

* The command line syntax has changed to support robust escaping.

  - `%sh{...}` is not expanded to multiple tokens automatically anymore,
    to evaluate its output as multiple tokens/commands, use the
    `evaluate-commands` command:

   -------------------------------------------------------------
   evaluate-commands %sh{ echo "first command; second command" }
   -------------------------------------------------------------

  - Escaping of `'` in `'...'` and `"` and `%` in `"..."` strings is done
    by doubling up (`''`, `""` and `%%`) instead of using a backslash

  - Bare words escaping has been tweaked.

  See <<command-parsing#,`:doc command-parsing`>>.

* Various lists (options, registers...) in Kakoune are now written using
  the command line syntax:

  - `set-register` now take an arbitrary number of parameters and sets
    the register to multiple strings. `%reg` expands to a list of strings.

  - the `$kak_reg_*` environment variable is now a list, `$kak_main_reg_*`
    provides the previous behaviour.

  - `%opt` expands list options as list of strings.

  - selection descs are whitespaces separated instead of `:` separated

* Highlighters syntax has changed to permit explicit naming and remove
  highlighter specific name parameters (such as for the group highlighter)
  `add-highlighter <path>/<name> <type> <params>` is the new syntax.

* Regions highlighters have been overhauled and are now specified with
  a sequence of commands instead of a single one:

  ------------------------------------------------------------------
  add-highlighter <path>/<name> regions
  add-highlighter <path>/<name>/<region name> region <begin> <end> \
  <type> <params>
  ------------------------------------------------------------------

  The recursion regex is opt-in through a `-recurse <recurse>` flag.

  They also are not necessarily groups anymore, a region can directly
  apply any other highlighter

  See <<highlighters#,`:doc highlighters`>>

* Highlighter type names have been unified, types that used `_` as
  word separators, such as `show_whitespaces` are now using `-`
  (`show-whitespace`).

* `a` on end of line is not treated specially anymore, it will start
  inserting on the next character, which will be the first character
  of the next line.

* `autoshowcompl` options has been renamed `auto_complete` and is
  now a `flags(insert|prompt)` option, allowing more granular
  configuration of when the completions should be displayed
  automatically.

* Prompt editing shortcuts have been changed to match readline.

== Kakoune 2018.04.13

First official Kakoune release.

= Command Parsing

Kakoune commands, either loaded from a script or written in the command
prompt, are parsed according to the following rules:

== Basic parsing

- Commands are terminated by a `;` or an end of line.

- Words (command names and parameters) are delimited by whitespaces.

== Quoted Strings

If a word starts with `'`, `"`, or `%X` with `X` a _non-nestable_ punctuation
character (see <<command-parsing#balanced-strings,Balanced Strings>> below for
nestable characters), it is parsed as a quoted string whose delimiter is,
respectively, `'`, `"`, or `X`.

A quoted string contains every character (including whitespaces).  Doubling
a closing delimiter escapes it.  Thus, for example, entering two closing
delimiters at the end of a quoted string will render one of the characters
literally; that is, it will be considered as part of the quoted string's
content.

Inside double quotes, `%`-strings are processed unless the `%` is escaped by
doubling it.  Double quotes inside these nested strings must also be escaped.

No other escaping takes place in quoted strings.

=== Quoted Strings Examples

- `'foo'` contains *foo*.

- `foo'bar'` is read verbatim, so it contains *foo'bar'*.

- `foo%|bar|` is read verbatim, so it contains *foo%|bar|*.

- `'foo''bar'` is a single word whose content is *foo'bar*.

- `"baz"""` is a single word whose content is *baz"*.

- `%|foo||bar|` is a single word whose content is *foo|bar*.

- `"foo %|""bar| %%,baz,"` is a single word whose content is *foo "bar %,baz,*.

== Balanced Strings

If a word starts with `%X` with `X` a _nestable_ punctuation character (one
of `(`, `[`, `{` and `<`), it is parsed as a balanced string whose closing
delimiter matches that of its opening delimiter (respectively, `)`, `]`,
`}`, and `>`).

There is no way to escape the opening and closing characters, even if they
are nested inside some other kind of string.

=== Balanced Strings Examples

- `%{foo}` contains *foo*.

- `%{foo\{bar}}` contains *foo\{bar}*.

- `foo%{bar}` contains *foo%{bar}*.

- `"foo %{bar}"` is a single word whose content is *foo bar*.

- `%{foo\{}` is a parse error, since the `{}` delimiters are not balanced.

- `%[foo\{]` contains *foo\{*, since it uses different delimiters.

== Non-Quoted words

Other words are non-quoted.  Non-quoted words are terminated by either a
whitespace or a `;`.

If they start with a `\` followed by a `%`, `'`, or `"`, then that leading
`\` escapes those characters and is discarded.

If a whitespace or `;` is preceded by a `\`, then the `\` is discarded, and
the whitespace or `;` becomes part of the word.  Any other `\` is treated
as a literal `\`.

== Typed Expansions

Quoted and Balanced strings starting with `%` might have an optional
alphabetic *expansion type* between the `%` and their delimiter (which is
always a punctuation character).  This *expansion type* defines how the
string's content is going to be expanded.  Rules for expanding and escaping
expansion types are the same as for `%`-strings.

- If the *expansion type* is empty, the string content is used verbatim.

- If the *expansion type* is one of `sh`, `reg`, `opt`, `val` or `arg`,
  the string is expanded as described in <<expansions#,`:doc expansions`>>.

- For any other *expansion type*, a parsing error is raised.

= Commands

Some commands take an exclamation mark (*!*), which can be used to force
the execution of the command (i.e. to quit a modified buffer, the
command *q!* has to be used). Aliases are mentioned below each command.

*doc* <topic>::
    *alias* help +
    display documentation about a topic. The completion list displays the
    available topics

== Files and Buffers

For the following *write* commands, the *-sync* switch forces the synchronization
of the file onto the filesystem

*arrange-buffers* <buffer>...::
    Reorder the buffers in the buffers list.
    The named buffers will be moved to the front of the buffer list, in the order
    given. Buffers that do not appear in the parameters will remain at the
    end of the list, keeping their current order.

*change-directory* [<directory>]::
    *alias* cd +
    change the current directory to *directory*, or the home directory if
    unspecified

*edit[!]* [<switches>] <filename> [<line> [<column>]]::
    *alias* e +
    open buffer on file, go to given line and column. If file is already
    opened, just switch to this file. Use edit! to force reloading

    *-debug*:::
        The new buffer (if any) will be created as a debug buffer.
        (See <<buffers#debug-buffers,`:doc buffers debug-buffers`>>)

    *-existing*:::
        If the named file does not exist, fail instead of creating a new buffer.

    *-readonly*:::
        The new buffer (if any) will be set read-only.

    *-fifo* <fifoname>:::
        Creates a new scratch buffer named <filename>, and continually appends
        data from the fifo (named pipe) <fifoname> as it arrives.
        (See <<buffers#fifo-buffers,`:doc buffers fifo-buffers`>>)

    *-scratch*:::
        Creates a new buffer named <filename>, which doesn't correspond to any
        file on disk. If no filename is given, the buffer name will be
        generated based on format `\*scratch-$ID\*`, where `$ID` is an
        integer automatically incremented for new buffers.
        (See <<buffers#scratch-buffers,`:doc buffers scratch-buffers`>>)

    *-scroll*:::
        If used with `-fifo`, when new data arrives Kakoune will scroll the
        buffer down to make the new data visible.
        Otherwise, does nothing.


*write[!]* [-force] [-sync] [-method <writemethod>] [<filename>]::
    *alias* w +
    write buffer to <filename> or use its name if filename is not
    given. If the file is write-protected, its permissions are temporarily
    changed to allow saving the buffer and restored afterwards when
    the write! command is used.

    *-force*:::
        Equivalent to `!`, allow overwiting existing files if `<filename>`
        is given and set permissions temporarily if necessary.

    *-sync*:::
        Synchronise the filesystem after the write

    *-method <writemethod>*:::
        Enforce write method instead of relying on the `writemethod` option

        `replace`::::
            Write to a temporary file then rename to the target file so that
            the modification appears atomically.

        `overwrite`::::
            Open the existing file and overwrite its content with the new
            content.

        (See <<options#builtin-options,`:doc options builtin-options`>>)

*write-all* [-sync] [-method <writemethod>]::
    *alias* wa +
    write all changed buffers that are associated with a file

*quit[!]* [<exit status>]::
    *alias* q +
    exit Kakoune, use quit! to force quitting even if there is some
    unsaved buffer remaining. If specified, the client exit status
    will be set to <exit status>

*write-quit[!]* [-sync] [-method <writemethod>] [<exit status>]::
    *alias* wq +
    write current buffer and quit current client. If specified, the client
    exit status will be set to <exit status>

*write-all-quit* [-sync] [-method <writemethod>] [<exit status>]::
    *alias* waq +
    write all buffers and quit. If specified, the client exit status
    will be set to <exit status>

*buffer* <name>::
    *alias* b +
    switch to buffer <name>

*buffer-next*::
    *alias* bn +
    switch to the next buffer.
    Debug buffers are skipped.
    (See <<buffers#debug-buffers,`:doc buffers debug-buffers`>>)

*buffer-previous*::
    *alias* bp +
    switch to the previous buffer.
    Debug buffers are skipped.
    (See <<buffers#debug-buffers,`:doc buffers debug-buffers`>>)

*delete-buffer[!]* [<name>]::
    *alias* db +
    delete current buffer or the buffer <name> if specified

*rename-buffer* [-file|-scratch] <name>::
    set current buffer name, if *-scratch* or *-file* is given, ensure
    the buffer is set to the corresponding type.

*source* <filename> <param>...::
    execute commands in <filename>
    parameters are available in the sourced script as `%arg{0}`, `%arg{1}`, …

== Clients and Sessions

*rename-client* <name>::
    set current client name

*rename-session* <name>::
    set current session name

*kill[!]* [<exit status>]::
    terminate the current session, all the clients as well as the server.
    If specified, the server and clients exit status will be set to <exit status>

== Options

*declare-option* [<switches>] <type> <name> [<value>]::
    *alias* decl +
    declare a new option, the -hidden switch hides the option in completion
    suggestions (See <<options#declare-option,`:doc options declare-option`>>)

*set-option* [<switches>] <scope> <name> <value>::
    *alias* set +
    change the value of an option in *scope*
    (See <<options#set-option,`:doc options set-option`>>
    and <<scopes#,`:doc scopes`>>)

*unset-option* <scope> <name>::
    *alias* unset +
    unset the value of an option in *scope*, so the value from an outer scope
    is used
    (See <<options#unset-option,`:doc options unset-option`>>
    and <<scopes#,`:doc scopes`>>)

*update-option* <scope> <name>::
    update the value of an option if its type supports that operation
    (See <<options#update-option,`:doc options update-option`>>
    and <<scopes#,`:doc scopes`>>)

== Commands and Keys

*define-command* [<switches>] <name> <command>::
    *alias* def +
    define a new command (See <<declaring-new-commands,Declaring new commands>>)

*alias* <scope> <name> <command>::
    define a new alias named *name* in *scope*
    (See <<aliases,Using aliases>> and <<scopes#,`:doc scopes`>>)

*complete-command* [<switches>] <name> <type> [<param>]::
    *alias* compl +
    configure how a command completion works
    (See <<configuring-command-completion,Configuring command completion>>)

*unalias* <scope> <name> [<command>]::
    remove an alias if its current value is the same as the one passed
    as an optional parameter, remove it unconditionally otherwise
    (See <<aliases,Using aliases>> and <<scopes#,`:doc scopes`>>)

*evaluate-commands* [<switches>] <command> ...::
    *alias* eval +
    evaluate commands, as if they were entered in the command prompt
    (See <<execeval#,`:doc execeval`>>)

*execute-keys* [<switches>] <key> ...::
    *alias* exec +
    execute a series of keys, as if they were hit (See <<execeval#,`:doc execeval`>>)

*map* [<switches>] <scope> <mode> <key> <keys>::
    bind a list of keys to a combination (See <<mapping#,`:doc mapping`>>
    and <<scopes#,`:doc scopes`>>)

*unmap* <scope> <mode> <key> [<expected>]::
    unbind a key combination (See <<mapping#,`:doc mapping`>>
    and <<scopes#,`:doc scopes`>>)

*declare-user-mode* <name>::
    declare a new user keymap mode

*enter-user-mode* [<switches>] <name>::
    enable <name> keymap mode for next key

    *-lock*:::
        stay in mode until `<esc>` is pressed

== Hooks

*hook* [<switches>] <scope> <hook_name> <filtering_regex> <command>::
    execute *command* whenever a *hook_name* is triggered in *scope*
    (See <<hooks#,`:doc hooks`>> and <<scopes#,`:doc scopes`>>)

    *-group <groupname>*:::
        Add this hook to the *groupname* group, so it can be removed by the
        `remove-hooks` command (below)
        or disabled with the `disabled_hooks` option
        (see <<options#builtin-options,`:doc options builtin-options`>>).

    *-once*:::
        This hook will be automatically removed after it has been executed.

    *-always*:::
        This hook will run even while hooks are disabled.
        See <<hooks#disabling-hooks,`:doc hooks disabling-hooks`>>.

*remove-hooks* <scope> <group>::
    *alias* rmhooks +
    remove every hook in *scope* whose group matches the regex *group*
    (See <<hooks#,`:doc hooks`>> and <<scopes#,`:doc scopes`>>)

*trigger-user-hook* <param>::
    trigger the `User` hook with the given *param* as filter string in
    the current context. (See <<hooks#,`:doc hooks`>>)

== Display

*echo* [<switches>] <text>::
    show *text* in status line, with the following *switches*:

    *-markup*:::
        expand the markup strings in *text* (See
        <<faces#markup-strings,`:doc faces markup-strings`>>)

    *-debug*:::
        print the given text to the *\*debug** buffer

    *-to-file* <filename>:::
        write the given text to the given file on the host
        filesystem.

    *-quoting* <quoting>:::
        define how arguments are quoted in echo output:

        - *raw* (default)::::
            just join each argument with a space

        - *kakoune*::::
            also wrap each argument in single quotes, doubling-up
            embedded quotes.

        - *shell*::::
            also wrap each arguments in single quotes and escape
            embedded quotes in a shell compatible way.

*set-face* <scope> <name> <facespec>::
    *alias* face +
    define a face in *scope*
    (See <<faces#,`:doc faces`>> and <<scopes#,`:doc scopes`>>)

*unset-face* <scope> <name>::
    Remove a face definition from *scope*
    (See <<faces#,`:doc faces`>> and <<scopes#,`:doc scopes`>>)

*colorscheme* <name>::
    load named colorscheme

*add-highlighter* [<switches>] <highlighter_path> <highlighter_parameters> ...::
    *alias* addhl +
    add a highlighter to the current window
    (See <<highlighters#,`:doc highlighters`>>)

*remove-highlighter* <highlighter_path>::
    *alias* rmhl +
    remove the highlighter whose id is *highlighter_id*
    (See <<highlighters#,`:doc highlighters`>>)

== Helpers

Kakoune provides some helper commands that can be used to define composite
commands in scripts. They are also available in the interactive mode,
but not really useful in that context.

*prompt* [<switches>] <prompt> <command>::
    prompt the user for a string, when the user validates, executes the
    command. The entered text is available in the `text` value accessible
    through `$kak_text` in shells or `%val{text}` in commands.

    The *-init <str>* switch allows setting initial content, the
    *-password* switch hides the entered text and clears the register
    after command execution.

    The *-on-change* and *-on-abort* switches, followed by a command
    will have this command executed whenever the prompt content changes
    or the prompt is aborted, respectively.

    Completion support can be controlled with the same switches provided
    by the *define-command* command, see
    <<declaring-new-commands,Declaring new commands>>.

    For *-shell-script-completion* and *-shell-script-candidates*
    completions, token_to_complete will always be 1, and the full
    prompt content will be passed as a single token. In other words,
    word splitting does not take place.

    NOTE: The prompt is displayed in and receives input from the
    current client context, so inside a draft context like
    `evaluate-commands -draft`, it is invisible and only responds to
    an `execute-keys` command in the same context.

*on-key* <command>::
    wait for next key from user, then execute <command>, the key is
    available through the `key` value, accessible through `$kak_key`
    in shells, or `%val{key}` in commands.

    NOTE: The key press must come from the current client context,
    so inside a draft context like `evaluate-commands -draft`, it only
    responds to an `execute-keys` command in the same context.

*menu* [<switches>] <label1> <commands1> <label2> <commands2> ...::
    display a menu using labels, the selected label’s commands are
    executed. The *menu* command can take an *-auto-single* argument, to automatically
    run commands when only one choice is provided, and a *-select-cmds*
    argument, in which case menu takes three argument per item, the
    last one being a command to execute when the item is selected (but
    not validated)

    NOTE: The menu is displayed in and receives input from the
    current client context, so inside a draft context like
    `evaluate-commands -draft`, it is invisible and only responds to
    an `execute-keys` command in the same context.

*info* [<switches>] <text>::
    display text in an information box with the following *switches*:

    *-anchor* <line>.<column>:::
        print the text at the given coordinates

    *-style* <style>:::
        set the style and placement of the message box.

        *menu*::::
            display the info next to the displayed menu, as documentation
            for the currently selected entry.

        *above*::::
            display the info above the given anchor

        *below*::::
            display the info below the given anchor

         *modal*::::
             display the info modally, and do not auto-close the
             info or replace it with non modal info boxes. To hide
             a modal info box, use `info -style modal` with no
             arguments.

    *-title* <text>:::
        set the title of the message box

    *-markup*:::
        parse markup in both title (if provided) and text. (See
        <<faces#markup-strings,`:doc faces markup-strings`>>)

    NOTE: The info box is displayed in the current client context,
    so inside a draft context like `eval -draft`, it is invisible.

*try* <commands> [catch <on_error_commands>]...::
    prevent an error in *commands* from aborting the whole command
    execution, execute *on_error_commands* instead. If nothing is to be
    done on error, the catch part can be omitted. If an error is raised
    in the *on_error_commands*, that error is propagated, except if
    another *catch* and *on_error_commands* parameter follows, in which
    case those commands get executed, and so-on. During error commands,
    the description of the last raised error is available as `$kak_error`
    in the shell, or `%val{error}` in commands.

*nop*::
    does nothing, but arguments will be evaluated (e.g. shell expansion)

*fail* <text>::
    raise an error, uses <text> as its description

*set-register* <name> <contents>...::
    *alias* reg +
    set register *name* to *content*, each content parameter is assigned to
    a different string in the register. (See <<registers#,`:doc registers`>>)

*select* [<switches>] <anchor_line>.<anchor_column>,<cursor_line>.<cursor_column>...::
    replace the current selections with the ones described in the arguments

    *-timestamp* <timestamp>:::
        specify which buffer timestamp those coordinates apply to. Uses current
        buffer timestamp if not specified.

    *-codepoint*::
        provided columns are to be interpreted as codepoint counts, not byte counts.

    *-display-column*::
        provided columns are to be interpreted as display column counts, not byte counts.

    both *-codepoint* and *-display-column* are only valid if *-timestamp*
    matches the current buffer timestamp (or is not specified).

*debug* {info,buffers,options,memory,shared-strings,profile-hash-maps,faces,mappings}::
    print some debug information in the *\*debug** buffer

== Module commands

In Kakoune, modules are a grouping of stored commands to be executed the first time
they are needed. This allows complex configurations to be evaluated lazily, and allows
plugins to ensure their dependencies have been loaded before they execute. The builtin
filetype handling for Kakoune is implemented via modules.

*provide-module* [<switches>] <name> <commands>::
    declares a module *name* that is defined by *commands*. *commands* will be
    evaluated as if by source the first time *require-module <name>* is run.

    *-override*:::
        allow the module to replace an existing one with the same name. Fails if
        the module has already been evaluated.

*require-module* <name>::
    guarantees the commands associated with *name* have been evaluated before
    continuing command execution. Fails if *name* has not been defined by a
    *provide-module* command. Does nothing if the associated commands have
    already been evaluated.

== Multiple commands

Commands (c.f. previous sections) can be chained, by being separated either
by new lines or by semicolons, as such a semicolon must be escaped with a
backslash (\;) to be considered as a literal semicolon argument.

To avoid trouble while writing `map` or `execute-keys` commands in scripts,
the alternative key namings `<semicolon>` and `<a-semicolon>` can be used.

== Declaring new commands

New commands can be defined using the *define-command* command:

*define-command* [<switches>] <command_name> <commands>::
    *commands* is a string containing the commands to execute, and *switches*
    can be any combination of the following parameters:

    *-params* <num>:::
        the command accepts a *num* parameter, which can be either a number,
        or of the form <min>..<max>, with both <min> and <max> omittable

    *-override*:::
        allow the new command to replace an existing one with the same name

    *-hidden*:::
        do not show the command in command name completions

    *-docstring*:::
        define the documentation string for the command

    *-menu*:::
    *-file-completion*:::
    *-client-completion*:::
    *-buffer-completion*:::
    *-command-completion*:::
    *-shell-completion*:::
    *-shell-script-completion*:::
    *-shell-script-candidates*:::
        old-style command completion specification, function as-if
        the switch and its eventual parameter was passed to the
        *complete-command* command
        (See <<configuring-command-completion,Configuring command completion>>)

        The use of those switches is discouraged in favor of the
        *complete-command* command.

Using shell expansion allows defining complex commands or accessing
Kakoune's state:

---------------------------------------------------------------------
# create a directory for current buffer if it does not exist
define-command mkdir %{ nop %sh{ mkdir -p $(dirname $kak_buffile) } }
---------------------------------------------------------------------

== Configuring command completion

Command completion can be configured with the *complete-command* command:

*complete-command* [<switches>] <command_name> <completion_type> [<parameter>]::
    *switches* can be:

    *-menu*:::
        the suggestions generated by the completion options are the only
        permitted parameters. Kakoune will autoselect the best completion
        candidate on command validation.

    *completion_type* can be:

    *file*:::
        try file completion on any parameter passed to the command

    *client*:::
        try client name completion on any parameter passed to the command

    *buffer*:::
        try buffer name completion on any parameter passed to the command

    *command*:::
        try command completion on any parameter passed to the command

    *shell*:::
        try shell command completion on any parameter passed to the command

    *shell-script*:::
        following string is a shell command which takes parameters as
        positional params and outputs one completion candidate per line.
        The provided shell command will run after each keypress.
        During the execution of the shell command, the following env vars are
        available:

        *$kak_token_to_complete*::::
            Index of the token being completed in the command line.
            Note that unlike the Unix `argv` tradition,
            0 is the first argument, not the command name itself.

        *$kak_pos_in_token*::::
            Position of the cursor inside the token being completed, in bytes
            from token start.

    *shell-script-candidates*:::
        following string is a shell script which takes parameters as
        positional params and outputs one completion candidate per line.
        The provided shell script will run once at the beginning of each
        completion session, candidates are cached and then used by kakoune
        internal fuzzy engine.

        During the execution of the shell script, the following env vars are
        available:

        *$kak_token_to_complete*::::
            Index of the token being completed in the command line.
            Note that unlike the Unix `argv` tradition,
            0 is the first argument, not the command name itself.

== Aliases

With `:alias`, commands can be given additional names.
As aliases are intended to be used interactively most of the time,
they are often short. For example `:reg` is an alias for `:set-register`.

They are scoped, so that an alias can refer to one command for a buffer,
and to another for another buffer. For instance `:next` could be an alias
for `grep-next-match` in a `*grep*` buffer while pointing to
`:make-next-error` in a `*make*` buffer.

The following command defines `<alias>` as an alias for `<command>`:

--------------------------------
:alias <scope> <alias> <command>
--------------------------------

`<scope>` can be one of `global`, `buffer` or `window`.

-------------------------------------
:unalias <scope> <alias> [<expected>]
-------------------------------------

Will remove the given alias in the given scope. If `<expected>` is specified
the alias will only be removed if its current value is `<expected>`.


= Execute-keys and Evaluate-commands

*execute-keys* [<switches>] <key> ...::
    Run keys as if they were pressed.

*evaluate-commands* [<switches>] <command> ...::
    Evaluate specified commands as if they were entered into the command
    prompt.

By default, the execution of both commands happens within the context of
the current client, and stops when the last key/command is reached or an
error occurs.

Without the *-save-regs* switch, *execute-keys* saves the following registers, which
are then restored when the keys have been executed: */*, *"*, *|*, *^*,
*@*, *:*. *evaluate-commands* doesn't save any registers by default.
(See <<registers#,`:doc registers`>>)

== Switches for both commands

*-client* <name>::
    Execute in the context of the client *name*.

*-try-client* <name>::
    Execute in the context of the client *name* if such client exists,
    or else in the current context.

*-draft*::
    Execute in a copy of the context of the selected client. Modifications to
    the selections or input state will not affect the client. This permits
    making modifications to the buffer without modifying the user’s
    selection.

*-itersel*::
    Execute once per selection, each having its own context. This prevents
    situations where selections get merged.

*-buffer* <names>::
    Execute in the context of each buffer specified in the comma separated
    list *names*. `*` can be used as a *name* to iterate over all non-debug
    buffers.
    (See <<buffers#debug-buffers, `:doc buffers`>>)

*-save-regs* <regs>::
    *regs* is a string of registers to be restored after execution (overwrites
    the list of registers saved by default).

== Switches specific to *evaluate-commands*

*-no-hooks*::
    Disable hook execution while executing the keys/commands.
    (See <<hooks#disabling-hooks,`:doc hooks`>>)

*-verbatim*::
    Don't reparse and split positional arguments. Forward them exactly
    as specified.

== Switches specific to *execute-keys*

*-with-maps*::
    Use a custom key mapping instead of the built-in one.
    (See <<mapping#,`:doc mapping`>>)

*-with-hooks*::
    Execute keys and trigger existing hooks.
    (See <<hooks#,`:doc hooks`>>)

= Expansions

While parsing a command (see <<command-parsing#,`:doc command-parsing`>>),
Kakoune recognises certain patterns and will replace them with their
associated value before executing the command. These patterns are called
expansions.

Every expansion consists of a `%`, followed by the expansion _type_ (one
or more alphabetic characters), a quoting character, and then all the text
up to and including its matching character.

If a nestable punctuation character (`(`, `[`, `{`, or `<`) is used as the
opening quoting character, the expansion will end at its matching opposite
(`)`, `]`, `}`, or `>`). Nested pairs of the braces used in the expansion are
allowed, but they must be balanced. Braces other than the ones used in the
expansion need not be balanced, however. For example, `%{nest{ed} non[nested}`
is valid and expands to `nest{ed} non[nested`.

If any other character is used, the expansion will end at the next occurrence of
that character. The quoting character can be escaped inside the expansion if it
is doubled-up. For example, `%|abc||def|` expands to the text `abc|def`.

It doesn't matter which character is used, but `{}` are most common.

There are 2 types of quoting which can be used to group together words separated
by whitespace into a single argument or prevent expansions from expanding:

"double quoted strings"::
    Double quoted strings are mainly for grouping multiple `%` expansions or
    `%` expansions and regular text as a single argument. `%` and `"` can be
    escaped by doubling the characters (i.e. `%%` and `""`).

'single quoted strings'::
    Expansions are not processed inside single quoted strings. Single quotes can
    be escaped by doubling up (i.e. `''`).

Expansions are processed when unquoted and anywhere inside double-quoted
strings, but not inside unquoted words, inside single-quoted strings, or
inside %-strings or other expansions (see
<<command-parsing#typed-expansions, `:doc command-parsing typed-expansions`>>
for full details). For example:

* `echo %val{session}` echoes the current session ID

* `echo x%val{session}x` echoes the literal text `x%val{session}x`

* `echo '%val{session}'` echoes the literal text `%val{session}`

* `echo "x%val{session}x"` echoes the current session ID, surrounded by `x`

* `echo %{%val{session}}` echoes the the literal text `%val{session}`

* `echo %sh{ echo %val{session} }` echoes the literal text `%val{session}`

Like "variable expansion" and "command substitution" in shell programming,
Kakoune expansions can expand to multiple "words" - that is, separate
arguments on the resulting command-line. However, unlike shell programming,
Kakoune expansions cannot _accidentally_ expand to multiple words because they
contain whitespace or other special characters. Only expansions which
semantically contain a list of values (list-type options, registers, selections,
etc.) expand to multiple arguments. While in shell-programming it's good
practice to always wrap expansions in double-quotes, in Kakoune it's perfectly
safe to leave expansions unquoted.

== Argument expansions

Expansions with the type `arg` can only be used inside the "commands" parameter
of the `define-command` command (See <<commands#declaring-new-commands,`:doc
commands declaring-new-commands`>>).

The following expansions are available:

*%arg{n}*::
     (where _n_ is a decimal number) +
     expands to argument number _n_ of the current command

*%arg{@}*::
    expands to all the arguments of the current command, as individual words

== Option expansions

Expansions with the type `opt` expand to the value associated with the named
option in the current scope (See <<options#,`:doc options`>>).

For example, `%opt{BOM}` expands to `utf8` or to `none`, according to the
current state of the `BOM` option.

== Register expansions

Expansions with the type `reg` expand to the contents of the named
register. For registers named after symbols (like the search register
`/`), the expansion can use either the symbol or the alphabetic name (See
<<registers#,`:doc registers`>>).

For example, `%reg{/}` expands to the content of the `/` register, and so does
`%reg{slash}`.

== Shell expansions

Expansions with the type `sh` are executed as shell-scripts, and whatever
the script prints to standard output replaces the expansion. For example,
the command `echo %sh{date}` will echo the output of the `date` command.

TIP: If a shell expansion writes to standard error, that output is appended to
Kakoune's `\*debug*` buffer. If you're trying to debug a shell expansion,
check the debug buffer with `:buffer \*debug*` to see if anything shows up.

Because Kakoune does not expand expansions inside the text of an expansion,
you can't use normal expansions inside `%sh{}`. Instead, Kakoune can export
expansions as environment variables to make them available to the shell.
Here's how expansion patterns map to variable names:

*%arg{n}*::
    (where _n_ is a decimal number) +
    becomes `$_n_`. For example, `%arg{3}` becomes `$3`.

*%arg{@}*::
    becomes `$@`

*%opt{x}*::
    becomes `$kak_opt_x`

*%reg{x}*::
    (where _x_ is the alphabetic name of a register) +
    `$kak_reg_x` contains all the selections in register _x_ +
    `$kak_main_reg_x` contains only the main selection

*%val{x}*::
    becomes `$kak_x`

Values can be quoted with a shell compatible quoting by using `$kak_quoted_`
as a prefix, this is mostly useful for list-type options and registers, as
it allows to correctly work with lists where elements might contains
whitespaces:

----
eval set -- "$kak_quoted_selections"
while [ $# -gt 0 ]; do
    # ... do a thing with $1 ...
    shift
done
----

The `eval` command will take the expanded `$kak_quoted_selections`
and unquote them, then execute the resulting `set` command, which sets
the shell's argument variables to the items from `$kak_selections`. The
`while` loop with `shift` iterates through the arguments one by one.

Only variables actually mentioned in the body of the shell expansion will
be exported into the shell's environment. For example:

----
echo %sh{ env | grep ^kak_ }
----

... will find none of Kakoune's special environment variables, but:

----
echo %sh{ env | grep ^kak_ # kak_session }
----

... will find the `$kak_session` variable because it was mentioned by name
in a comment, even though it wasn't directly used.

TIP: These environment variables are also available in other contexts where
Kakoune uses a shell command, such as the `|`, `!` or `$` normal mode commands
(See <<keys#,`:doc keys`>>).

=== Command and Response fifo

Inside shell expansions, `$kak_command_fifo` refers to a named pipe that
accepts Kakoune commands to be executed as soon as the fifo is closed. This
named pipe can be opened and closed multiple times which makes it possible
to interleave shell and Kakoune commands. `$kak_response_fifo` refers to
a named pipe that can be used to return data from Kakoune.

----
%sh{
    echo "write $kak_response_fifo" > $kak_command_fifo
    content="$(cat $kak_response_fifo)"
}
----

This also makes it possible to pass data bigger than the system environment
size limit.

== File expansions

Expansions with the type `file` will expand to the content of the filename
given in argument as read from the host filesystem.

For example, this command stores the entire content of `/etc/passwd` into the
`a` register.

----
set-register a %file{/etc/passwd}
----

== Value expansions

Expansions with the type `val` give access to Kakoune internal data that is
not stored in an option or a register. Some value expansions can only be used
in certain contexts, like `%val{hook_param}` that expands to the parameter
string of the currently-executing hook, and is not available outside a hook.

The following expansions are supported (with required context _in italics_):

*%val{buffile}*::
    _in buffer, window scope_ +
    full path of the file or same as `%val{bufname}` when there’s no
    associated file

*%val{buf_line_count}*::
    _in buffer, window scope_ +
    number of lines in the current buffer

*%val{buflist}*::
    quoted list of the names of currently-open buffers (as seen in
    `%val{bufname}`)

*%val{bufname}*::
    _in buffer, window scope_ +
    name of the current buffer

*%val{client_env_X}*::
    _in window scope_ +
    value of the `$X` environment variable in the client displaying the current
    window (e.g. `%val{client_env_SHELL}` is `$SHELL` in the client's
    environment)

*%val{client_list}*::
    unquoted list of the names of clients (as seen in `%val{client}`)
    connected to the current session

*%val{client}*::
    _in window scope_ +
    name of the client displaying the current window

*%val{client_pid}*::
    _in window scope_ +
    process id of the client displaying the current window

*%val{config}*::
    directory containing the user configuration

*%val{count}*::
    _in `map` command <keys> parameter and `<a-;>` from object menu_ +
    current count when the mapping was triggered, defaults to 0 if no
    count given

*%val{cursor_byte_offset}*::
    _in window scope_ +
    offset of the main cursor from the beginning of the buffer (in bytes)

*%val{cursor_char_column}*::
    _in window scope_ +
    1-based offset from the start of the line to the cursor position in
    Unicode codepoints, which may differ from visible columns if the document
    contains full-width codepoints (which occupy two columns) or zero-width
    codepoints

*%val{cursor_display_column}*::
    _in window scope_ +
    1-based offset from the start of the line to the cursor position in
    display column, taking into account tabs and character width.

*%val{cursor_char_value}*::
    _in window scope_ +
    unicode value of the codepoint under the main cursor

*%val{cursor_column}*::
    _in window scope_ +
    1-based offset from the start of the line to the first byte of the
    character under the main cursor (in bytes), the fourth component of
    `%val{selection_desc}`

*%val{cursor_line}*::
    _in window scope_ +
    line of the main cursor, the third component of `%val{selection_desc}`

*%val{error}*::
    _in `try` command's <on_error_commands> parameter_ +
    the text of the error that cancelled execution of the <commands> parameter
    (or the previous <on_error_commands> parameter)

*%val{history}*::
    _in buffer, window scope_ +
    the full change history of the buffer, including undo forks, in terms
    of `parent committed redo_child modification0 modification1 ...`
    entries, where _parent_ is the index of the entry's predecessor (entry
    0, which is the root of the history tree, will always have `-` here),
    _committed_ is a count in seconds from Kakoune's steady clock's epoch
    of the  creation of the history entry, _redo_child_ is the index of the
    child which will be visited for `U` (always `-` at the leaves of the
    history), and each _modification_ is presented as in
    `%val{uncommitted_modifications}`.

*%val{history_id}*::
    _in buffer, window scope_ +
    history id of the current buffer, an integer value which refers to a
    specific buffer version in the undo tree (see also `%val{timestamp}`)

*%val{hook_param_capture_n}*::
    _in `hook` command <command> parameter_ +
    text captured by capture group _n_, if the executing hook's filter regex
    used capture groups

*%val{hook_param}*::
    _in `hook` command <command> parameter_ +
    the complete parameter string of the executing hook

*%val{modified}*::
    _in buffer, window scope_ +
    `true` if the buffer has modifications not saved, otherwise `false`

*%val{object_flags}*::
    _for commands executed from the object menu's `<a-;>` only_ +
    a pipe-separted list of words including `inner` if the user wants
    an inner selection, `to_begin` if the user wants to select to the
    beginning, and `to_end` if the user wants to select to the end

*%val{register}*::
    _in `map` command <keys> parameter and `<a-;>` from the object menu_ +
    current register when the mapping was triggered

*%val{runtime}*::
    the directory containing the kak support files, which is determined from
    Kakoune's binary location if `$KAKOUNE_RUNTIME` is not set

*%val{select_mode}*::
    _for commands executed from the object menu's `<a-;>` only_ +
    `replace` if the new selection should replace the existing, `extend`
    otherwise

*%val{selection}*::
    _in window scope_ +
    content of the main selection

*%val{selections}*::
    _in window scope_ +
    quoted list of the contents of all selections

*%val{selection_desc}*::
    _in window scope_ +
    range of the main selection, represented as `a.b,c.d` where _a_ is the
    anchor line, _b_ is the number of bytes from the start of the line to the
    anchor, _c_ is the cursor line (like `%val{cursor_line}`), _d_ is
    the number of bytes from the start of the line to the cursor (like
    `%val{cursor_column}`), and all are 1-based decimal integers

*%val{selections_char_desc}*::
    _in window scope_ +
    unquoted list of the ranges of all selections, in the same format as
    `%val{selection_desc}`, except that the columns are in codepoints rather
    than bytes

*%val{selections_display_column_desc}*::
    _in window scope_ +
    unquoted list of the ranges of all selections, in the same format as
    `%val{selection_desc}`, except that the columns are in display columns rather
    than bytes

*%val{selections_desc}*::
    _in window scope_ +
    unquoted list of the ranges of all selections, in the same format as
    `%val{selection_desc}`

*%val{selection_length}*::
    _in window scope_ +
    length (in codepoints) of the main selection

*%val{selections_length}*::
    _in window scope_ +
    unquoted list of the lengths (in codepoints) of the selections

*%val{session}*::
    name of the current session

*%val{source}*::
    _in `.kak` file_ +
    path of the file currently getting executed (through the source command)

*%val{text}*::
    _in `prompt` command <command> parameter_ +
    the text entered by the user in response to the `prompt` command

*%val{timestamp}*::
    _in buffer, window scope_ +
    timestamp of the current buffer, an integer that increments each time the
    buffer is modified, including undoing and redoing previous modifications
    (see also `%val{history_id}`)

*%val{uncommitted_modifications}*::
    _in buffer, window scope_ +
    a list of quoted insertions (in the format `+line.column|text`) and
    deletions (`-line.column|text`) not yet saved to the history (e.g. typing
    in insert mode before pressing `<esc>`), where _line_ is the 1-based line
    of the change, _column_ is the 1-based _byte_ of the change start (see
    `%val{cursor_column}`), and _text_ is the content of the insertion or
    deletion (see also `%val{history}`)

*%val{user_modes}*::
    unquoted list of user modes.

*%val{version}*::
    version of the current Kakoune server (git hash or release name)

*%val{window_height}*::
    _in window scope_ +
    height of the current Kakoune window

*%val{window_width}*::
    _in window scope_ +
    width of the current Kakoune window

*%val{window_range}*::
    _in window scope_ +
    list of coordinates and dimensions of the buffer-space
    available on the current window, in the following format:
    `<coord_y> <coord_x> <height> <width>`

Values in the above list that do not mention a context are available
everywhere.

A value described as a "quoted list" will follow the rules of Kakoune string
quoting (See <<command-parsing#,`:doc command-parsing`>>). An "unquoted list"
cannot contain any special characters that would require quoting.

= Faces

== Declaration

A *face* determines how text is displayed. It has a foreground color,
a background color, and some attributes. The value of a face has the
following format:

-----------------------------------------------------------
[fg_color][,bg_color[,underline_color]][+attributes][@base]
-----------------------------------------------------------

fg_color, bg_color, underline_color::
    A color whose value can be:
        A named color:::
            *black*, *red*, *green*, *yellow*, *blue*, *magenta*, *cyan*,
            *white* *bright-black*, *bright-red*, *bright-green*,
            *bright-yellow* *bright-blue*, *bright-magenta*, *bright-cyan*,
            *bright-white*
        The color of the base face (see below):::
            *default*
        A hexadecimal value:::
            *rgb:RRGGBB*, *rgba:RRGGBBAA*
    If left unspecified, the value of *default* is used.
    Alpha values are used to blend the face onto either its base or else onto
    whatever color happens to be used at the moment. For technical reasons,
    alpha values must be >16.

attributes::
    A string whose individual letters each set an attribute:
        *u*:::
            underline
        *c*:::
            curly underline
            Note: This takes precedence over underline if both are specified.
        *r*:::
            reverse
        *b*:::
            bold
        *B*:::
            blink
        *d*:::
            dim
        *i*:::
            italic
        *s*:::
            strikethrough
        *F*:::
            final::::
                Override the previous face instead of merging with it. Can
                only be replaced if another face with the final attribute
                is applied.
        *f*:::
            final foreground::::
                Same as final, but only applies to a face's foreground color.
        *g*:::
            final background::::
                Same as final, but only applies to a face's background color.
        *a*:::
            final attributes::::
                Same as final, but only applies to a face's attributes.

base::
    The face onto which other faces apply. Its value can be any face name,
    as long as no cycle is introduced. A face can reference itself, in which
    case it'll apply on top of the version of the parent scope.

== Built-in faces

The following faces are used by color schemes to highlight certain areas of
the user interface:

*Default*::
    default colors:::
        The default foreground and background colors. If the value of *default*
        is used here, then the colors used will be your terminal's defaults.

*PrimarySelection*::
    Main selection face for every selected character except the cursor.

*SecondarySelection*::
    Secondary selection face for every selected character except the cursor.

*PrimaryCursor*::
    Cursor of the primary selection.

*SecondaryCursor*::
    Cursor of the secondary selection.

*PrimaryCursorEol*::
    Cursor of the primary selection when it lies on an EOL (end of line)
    character.

*SecondaryCursorEol*::
    Cursor of the secondary selection when it lies on an EOL (end of line)
    character.

*MenuForeground*::
    Face for items selected in menus.

*MenuBackground*::
    Face for items not selected in menus.

*MenuInfo*::
    Face for the additional information displayed when selecting items in menus.

*Information*::
    Face for windows and messages displaying other information.

*Error*::
    Face for errors reported by Kakoune in the status line.

*DiagnosticError*::
    Face for errors reported by external tools in the buffer.

*DiagnosticWarning*::
    Face for warnings reported by external tools in the buffer.

*StatusLine*::
    Face for the status line.

*StatusLineMode*::
    Face for the current mode, except normal mode.

*StatusLineInfo*::
    Face for special information.

*StatusLineValue*::
    Face for special values (numeric prefixes, registers, etc.).

*StatusCursor*::
    Face for the status line cursor.

*Prompt*::
    Face for the prompt displayed on the status line.

*BufferPadding*::
    Face applied on the *~* characters that follow the last line of a buffer.

=== Built-in highlighter faces

The following faces are used by built-in highlighters if enabled.
(See <<highlighters#,`:doc highlighters`>>).

*LineNumbers*::
    Face used by the *number-lines* highlighter.

*LineNumberCursor*::
    Face used to highlight the line number of the main selection.

*LineNumbersWrapped*::
    Face used to highlight the line number of wrapped lines.

*MatchingChar*::
    Face used by the *show-matching* highlighter.

*Whitespace*::
    Face used by the *show-whitespaces* highlighter.

*WrapMarker*::
    Face used by the *wrap-marker* highlighter.

== Markup strings

In certain contexts, Kakoune can understand markup strings, which are strings
containing formatting information. In these strings, the {facename} syntax
will enable the face facename until another face gets activated, or the end
of the string is reached.

For example, the following command displays the text "default" in the
*Default* face, and "error" in the *Error* face:

----
echo -markup 'default {Error}error{Default} default'
----

Inside a markup string, a literal `{` character is written as `\{`, and a
literal backslash (`\`) character is written as `\\`.

The `{\}` string disables markup processing for the rest of the line. It
can be used to avoid having to escape text that might be mistaken for markup
instructions.

For example, this will prevent any `{` in the current buffer name from being
incorrectly interpreted as markup.

----
echo -markup "{Information}name:{\} %val{bufname}"
----

= FAQ

== The project

=== How to pronounce the name of the project and what does it mean ?

The name of the project is pronounced "Kak-oon", and is a word taken from a
New Caledonian dialect based on French. It means a hard blow, usually a punch,
but generally refers to a strike into which all of one's strength went.

=== Is there going to be a Windows port of Kakoune ?

As many features provided by UNIX systems are missing or less efficient on
a Windows system, the incentive to porting the project to this operating
system is low.

Moreover, you can achieve pretty decent performance by using Kakoune on
Cygwin (which is officially supported).

== Interfacing

=== Can I use Kakoune as a pager ?

Kakoune can be used as a pager, either by setting the `PAGER` environment
variable to `kak`, or by writing data directly to its standard input using a
shell pipeline.

=== Are there any non-console based frontends available?

No graphical frontend is currently officially maintained, you can however
try experimental community-developed ones.

=== Why are colors misrendered in my Kakoune clients?

The most probable cause for colors being misrendered is a widespread practice
that consists in setting the `TERM` environment variable in the shell's
configuration file. This variable should be set by the terminal emulator,
and not overridden with an arbitrary value, otherwise it might interfere
with general UI rendering on the terminal's window.

=== I'm using `tmux` and colors look weird

If you're using a tool that doesn't support "palette switching", colors will
still be slightly off: they are being rounded down to values supported by the
regular color palette of Kakoune. Fortunately, on recent versions of `tmux`
(>=2.6), you can work around that by using the following configuration
settings:

.~/.tmux.conf
----
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",*col*:Tc"
----

Note: `\*col*` is a regular expression that matches your terminal's `$TERM`
value, modify it if necessary, e.g. `xterm-termite`.

Next, run the following command to create a local `terminfo` override:

----
$ tic /path/to/kakoune/contrib/tmux-256color.terminfo
----

Finally, quit all existing sessions (`tmux kill-server`), and restart `tmux`.

=== Why do I see weird special characters (~T~@~U) around Clippy?

You need a UTF-8 compliant locale, in order to render special characters.

The way to do so might vary from distribution to another, but an easy way
to verify that your locale is set correctly is to run the following command:

----
$ locale
----

The output should look similar to the following (with your own
language/country code set, instead of `en_US`):

----
LANG=en_US.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=
----

You can also run the project's test suite, which should display errors if
your locale doesn't support UTF-8 rendering:

----
$ cd kakoune
$ make test
----

=== Why does leaving insert mode take more than half a second in `tmux`?

Upon hitting the escape key, `tmux` waits for a short period of time to
determine whether it's part of a function or a meta key sequence. In order
to fix this "lag", set the waiting period in your `tmux` configuration file
to a short time, e.g. 25ms: `set -sg escape-time 25`

=== Can I split the window to display different buffers in them?

As a fairly compliant follower of the UNIX philosophy, Kakoune does not
try to implement features that are best handled by separate, dedicated
tools. Window splitting in terminals is a prime example of that
concept, where the editor provides commands to interact with several
terminal multiplexers (e.g. `tmux`), as opposed to emulating their
functionalities.

In order to open buffers in the same window simultaneously using `tmux`
(or one of the supported multiplexers), run Kakoune in a `tmux` session,
and simply use the `:new` command to spawn new clients as you would
have otherwise in an X11 environment.

== Generic functionalities

=== Something is wrong, how can I get more debug information?

You can get quite a lot of information out of the editor at runtime. One
way is through the `:debug` command, which will print out statistics and
state data into the `\*debug*` buffer:

----
:debug <command>
----

Another way is to set flags on the `debug` option:

----
:set global debug <flags>
----

Make sure to read all possible values suggested by the completion engine,
as you type out both commands in a prompt.

If you want to troubleshoot a crash, you need to compile the editor with
debug symbols enabled:

----
$ make debug=yes
----

The resulting binary should produce a stacktrace that you can, afterwards,
post in an issue in unmangled form (c.f. `c++filt`).

=== How can I explore the filesystem the way Vim's NerdTree does?

The builtin file completion engine used when opening a file for editing
(using the `:edit` command and letting the suggestions pop up in the menu
beneath) is more convenient than Vim's, which should suit basic needs.

However, if you need an actual explorer to interact with the editor,
you can create a Kakoune script that will spawn the tool in question,
which should in return send an "edit" command followed by the path of the
file you selected to the current Kakoune session (e.g. `echo "eval -client
$kak_client edit /path/to/file" | kak -p $kak_session`).

=== How do I automatically indent code, as Vim does with `=`?

As `Kakoune` doesn't parse the contents of the buffers, there is no builtin
equivalent for this Vim feature. Use a formatter/prettifier dedicated to
the language you're using with the help of the `|` key.

Example: `%|indent<ret>` to indent an entire buffer with C code.

You can also set the `formatcmd` option and use the `:format` command to
format the entire buffer.

=== Can Kakoune automatically complete the parameters of my functions?

As mentioned in the above question about Vim's `=` key, Kakoune does not
parse the contents of a buffer by itself, which makes it impossible for
the editor to propose candidates upon completion.

However, support for such a feature can be achieved through the use of a
dedicated tool, as is the case with `clang` and C code: you can use the
`clang-enable-autocomplete` and `clang-complete` builtin commands whenever
editing a C/C++ file, and completion will work on function parameters.

Other language-support scripts implement this functionality in a similar way,
for example the `jedi` script for Python buffers.

Another way to get automatic parameter completion that doesn't depend on
built-in support in Kakoune is through the
https://microsoft.github.io/language-server-protocol/[Language Server Protocol],
for which you can find implementations that interact with the editor.

=== Why aren't widely known command line shortcuts such as <c-w> or <c-u> available in Kakoune?

Despite their widespread availability in multiple tools, those shortcuts do
not fit the paradigm that Kakoune implements, which is based on selections
first.

However, you can easily declare key mappings in your configuration file
to be able to use those control-based shortcuts in insert mode.
(See <<mapping#,`:doc mapping`>>)

Also note that a subset of "readline shortcuts" is implemented for command
prompts.

=== Can I disable auto-indentation completely?

All the indentation hooks are conventionally named `<lang>-indent`, which
allows us to use the `disabled_hooks` variable to disable indentation
globally with the following command: `set global disabled_hooks '.+-indent'`

=== How to enable syntax highlighting?

The MIME type of the files opened in new buffers is detected using the
`file` command, and syntax highlighting enabled automatically when
possible.

=== My file seems to be highlighted with the wrong colors, I thought syntax highlighting was detected automatically?

The `file` utility has several shortcomings, such as detecting the
wrong MIME type for a file containing data with different syntax, e.g.
a Python script containing hardcoded HTML templates detected as an HTML
file.

Kakoune does its best to detect file types (using known extensions for a
given format for instance), but not much can be done about those ambiguous
cases. You might consider writing a custom `$HOME/.magic` file if needed.

=== Can I disable syntax highlighting completely?

Similarly to the indentation hooks, the name format followed by the
highlighting hooks is `<lang>-highlight`. You can thus disable syntax
highlighting using the following command: `set global disabled_hooks
'.+-highlight'`

=== Can the cursor be rendered as a beam?

Rendering the cursor as a beam is a common feature of other modal editors,
it however doesn't fit within Kakoune's selection-first paradigm.

There is a selection on screen at all times, containing either data selected
by the user, or a newline character when the buffer is empty.

A selection is bound by an anchor and a cursor. They can overlap, but
ultimately must both be placed *over* a character. A beam cursor placed
*between* two characters doesn't fulfil that requirement, and is thus
not allowed.

== The editing language

=== The scripting language lacks keywords, when are you going to expand it?

The scripting language is the smallest subset of statements/keywords that
allows users to write plugins, commands, mappings.

It's not intended to be a one-stop generic interface, but rather a glue
between core Kakoune instructions and complex logic.

Other editors generally come up with their own language or leverage existing
ones (for example, VimL, LUA), whereas Kakoune interacts with the shell,
through `%sh{…}` scopes.

As arbitrary Kakoune data (options, selection etc.) can be shared with
shell scopes through environment variables, users are free to process this
data with pure shell scripting, or whatever interpreter they desire.

=== Why aren't there other scopes similar to `%sh{}` e.g. python?

Supporting custom scopes would add hard dependencies to the project, which
is too much of a drawback when balanced against the low cost of using
an interpreter in a regular shell scope (e.g. `%sh{ python -c "..." }`).
The shell scope allows users to spawn any interpreter they want, for a minimal
cost in terms of performance, it is therefore the reason why it's the only
one available by default.

=== What shell is used to expand `%sh{}` scopes?

The server expands shell scopes using the `sh` binary, located in one of
the directories containing all the POSIX standard utilities. This list of
directories is stored in a system configuration variable, and queried by
Kakoune at startup.

In most distributions, `/bin/sh` will end up being used.

=== Why does a dot `.` in a regex select newline characters?

Data in buffers is a stream of characters, and newlines do not receive special
treatment compared to other characters, with regards to regex matching. In
order to select data in a line without any trailing newline characters, one could
use the `[^\n]+` pattern, which is arguably a good compromise when
balanced against the ability to select data over several lines.

You can instruct the regex engine to stop matching newline characters with
`.` by disabling the appropriate flag (`(?S)`).

=== Why does `a` extend the current selection, but `i` leaves it untouched?

Selections are ranges of characters whose delimiters are an "anchor" and
a "cursor", and inserting characters is always done before the cursor in
insert mode.

Consequently, using the append primitive (`a`) nudges the cursor forward to
make room for characters, effectively extending the current selection since
the anchor remains immobile, even when the anchor and the cursor are at the
same location. By opposition, using the insert primitive (`i`) merely adds
characters before the cursor, which never modifies the current selection.

=== How to apply changes to all open buffers?

The `:exec` and `:eval` commands can apply changes to a comma-separated
list of buffers, passed as argument to the `-buffer` flag.

In order to let the editor figure out which buffers are open, the special
value `*` is accepted as a wildcard. For example, in order to reload all
open buffers:

----
:eval -buffer * e!
----

=== Why is the text I pasted into a buffer completely mangled?

In order to assist users with writing code, some buffers come with hooks that
automatically indent the text inserted. Pasting the contents of the clipboard
into a buffer in insert mode triggers this indentation functionality,
resulting into mangled text.

To prevent that from happening:

* disable hooks and enter insert mode with `\i`
* insert text into the buffer (e.g. paste the clipboard's contents)
* exit insert-mode, restoring hooks with `<esc>`

= Highlighters

== Description

Manipulation of the displayed text is done through highlighters, which can
be added or removed with the following commands:

-----------------------------------------------------------------
add-highlighter [-override] <path>/<name> <type> <parameters> ...
-----------------------------------------------------------------

and

--------------------------------
remove-highlighter <path>/<name>
--------------------------------

*path* is the name of a highlighter group, it is expressed as a */*
separated path starting with a scope. Scopes are *global*, *buffer*,
*window* and *shared*

*name* is the name of the highlighter, if name is omitted in
`add-highlighter` (the path ends with a `/`), it will be auto-generated
from the remaining parameters.

if `-override` is specified and the given name already exists, that
highlighter is replaced with the new one.

== Convenient highlighters

*show-matching*::
    highlight matching char of the character under the selections' cursor
    using `MatchingChar` face

*show-whitespaces* [options]::
    display symbols on top of whitespaces to make them more explicit
    using the `Whitespace` face, with the following *options*:

    *-lf* <separator>:::
        a one character long separator that will replace line feeds

    *-spc* <separator>:::
        a one character long separator that will replace spaces

    *-nbsp* <separator>:::
        a one character long separator that will replace non-breakable spaces

    *-tab* <separator>:::
        a one character long separator that will replace tabulations

    *-tabpad* <separator>:::
        a one character long separator that will be appended to tabulations to honor the *tabstop* option

*number-lines* [options]::
    show line numbers using the `LineNumbers`, `LineNumberCursor` and `LineNumbersWrapped` faces,
    with the following *options*: 

    *-relative*:::
        show line numbers relative to the main cursor line

    *-hlcursor*:::
        highlight the cursor line with a separate face

    *-separator* <separator text>:::
        specify a string to separate the line numbers column from
        the rest of the buffer (default is '|')

    *-cursor-separator* <separator text>:::
        identical to *-separator* but applies only to the line of the cursor
        (default is the same value passed to *-separator*)

    *-min-digits* <num>:::
        always reserve room for at least *num* digits,
        so text doesn't jump around as lines are added or removed
        (default is 2)

*wrap* [options]::
    soft wrap buffer text at window width, with the following *options*:

    *-word*:::
        wrap at word boundaries instead of codepoint boundaries.

    *-indent*:::
        preserve line indent when wrapping.

    *-width <max_width>*:::
        wrap text at *max_width* if the window is wider.

    *-marker <marker_text>*:::
        prefix wrapped lines with *marker_text*; if *-indent* was given,
        the marker_text is displayed into the indentation if possible.

== General highlighters

*fill* <face>::
    fill using the given *face*, mostly useful with regions highlighters

*column* <number> <face>::
    highlight column *number* with face *face*

*line* <number> <face>::
    highlight line *number* with face *face*

*regex* <regex> <capture_id>:<face> ...::
    highlight a regex, takes the regex as first parameter, followed by
    any number of face parameters.
    This highlights C++ style comments in cyan, with an eventual 'TODO:'
    in yellow on red background:

--------------------------------------------------------------------
add-highlighter window/ regex //\h*(TODO:)[^\n]* 0:cyan 1:yellow,red
--------------------------------------------------------------------

    capture_id can be either the capture number, or its name if a
    named capture is used in the regex (See
    <<regex#groups, `:doc regex groups`>>)

*dynregex* <expression> <capture_id>:<face> ...::
    similar to regex, but expand (like a command parameter would) the
    given expression before building a regex from the result.
    This highlights all the current search matches in italic:

-----------------------------------------------
add-highlighter window/ dynregex '%reg{/}' 0:+i
-----------------------------------------------

== Specs highlighters

The following highlighters are useful to add indicators like lint warnings,
git blame output or spelling mistakes.
See <<options#types,`:doc options types`>> for the format of `line-specs`
and `range-specs`.

*flag-lines* <face> <option_name>::
    add columns in front of the buffer, and display the flags specified
    in `line-specs` option, using <face>.
    In this example two words will be added in the gutter: a blue Foo at
    line 1 and a bold red/yellow Bar on line 3:

------------------------------------------------------------------------
declare-option line-specs my_flags
set-option window my_flags %val{timestamp} '1|Foo' '3|{red,yellow+b}Bar'
add-highlighter window/ flag-lines blue my_flags
------------------------------------------------------------------------

*ranges* <option_name>::
    use the data in the `range-specs` option of the given name to highlight
    the buffer. The string part of each tuple of the range-specs is
    interpreted as a *face* to apply to the range.
    In this example the 3 first chars of the buffer will be colored in red:

--------------------------------------------------------
declare-option range-specs my_range
set-option window my_range %val{timestamp} '1.1,1.3|red'
add-highlighter window/ ranges my_range
--------------------------------------------------------

*replace-ranges* <option_name>::
    use the data in the `range-specs` option of the given name to highlight
    the buffer. The string part of each tuple of the range-specs is
    interpreted as markup string (see <<faces#markup-strings,
    `:doc faces markup-strings`>>) and displayed in place of the range.
    Here, the 3 first chars of the buffer will be replaced by the word 'red':

--------------------------------------------------------
declare-option range-specs my_range
set-option window my_range %val{timestamp} '1.1,1.3|red'
add-highlighter window/ replace-ranges my_range
--------------------------------------------------------

== Highlighting Groups

The *group* highlighter is a container for other highlighters. A subgroup
can be added to an existing group or scope using:

-----------------------------------
add-highlighter <path>/<name> group 
-----------------------------------

Other highlighters can then be added to that group

------------------------------------------------
add-highlighter <path>/<name> <type> <params>...
------------------------------------------------

In order to specify which kinds of highlighters can be added to a
given group, the *-passes* flag set can be passed along with the group
name. Possible values for this option can be one or several (separated
with a pipe sign) of *colorize*, *move* or *wrap* (default: *colorize*):

--------------------------------------------------------------
add-highlighter window/<name> group -passes colorize|move|wrap
--------------------------------------------------------------

== Regions highlighters

A special highlighter provides a way to segment the buffer into regions,
which are to be highlighted differently.

-------------------------------------
add-highlighter <path>/<name> regions
-------------------------------------

Individual region definitions can then be added to that highlighter

----------------------------------------------------
add-highlighter <path>/<name>/<region_name> region \
    [-match-capture] [-recurse <recurse>]          \
    <opening> <closing> <type> <params>...
----------------------------------------------------

*opening*::
    regex that defines the region start text

*closing*::
    regex that defines the region end text

*recurse*::
    regex that defines the text that matches recursively an end token
    into the region, every match of *recurse* will consume a following
    match of *closing* regex, preventing it from closing the region.

*type* and *params*::
    A highlighter type, and associated params, as they would be passed
    to `add-highlighter` if they were not applied as a region.

If the *-match-capture* switch is passed, then region *closing* and *recurse*
regex matches are considered valid for a given region opening match only if they
matched the same content for the capture 1 in the *opening* regex.

The *recurse* option is useful for regions that can be nested, for example
the following construct:

----------
%sh{ ... }
----------

accepts nested braces scopes ('{ ... }') so the following string is valid:

----------------------
%sh{ ... { ... } ... }
----------------------

This region can be defined with:

---------------------------------
shell_expand -recurse \{ %sh\{ \}
---------------------------------

Regions are matched using the left-most rule: the left-most region opening
starts a new region. When a region closes, the closest next opening start
another region.

That matches the rule governing most programming language parsing.

A default region, that will apply its given highlighter to the segments of the
buffer that are not in any defined region, can be added with the *default-region*
highlighter type.

-----------------------------------------------------------------------------
add-highlighter <path>/<name>/<region_name> default-region <type> <params>...
-----------------------------------------------------------------------------

Most programming languages can then be properly highlighted using a region
highlighter as root:

-----------------------------------------------------------------
add-highlighter <path>/<lang> regions
add-highlighter <path>/<lang>/string region '"' '"' fill string
add-highlighter <path>/<lang>/comment region '//' '$' fill comment
add-highlighter <path>/<lang>/code default-region group
add-highlighter <path>/<lang>/code/variable regex ...
add-highlighter <path>/<lang>/code/function regex ...
-----------------------------------------------------------------

== Shared Highlighters

Highlighters are often defined for a specific filetype, and it makes then
sense to share the highlighters between all the windows on the same filetypes.

Highlighters can be put in the shared scope in order to make them reusable.

---------------------------------
add-highlighter shared/<name> ...
---------------------------------

The common case would be to create a named shared group, or regions and then
fill it with highlighters:

---------------------------------------
add-highlighter shared/<name> group
add-highlighter shared/<name>/ regex ...
---------------------------------------

It can then be referenced in a window using the ref highlighter.

----------------------------------
add-highlighter window/ ref <name>
----------------------------------

The ref can reference any named highlighter in the shared scope.

= Hooks

== Description

Commands can be registered to be executed when certain events arise. To
register a hook use the following command:

------------------------------------------------------------------
hook [<switches>] <scope> <hook_name> <filtering_regex> <commands>
------------------------------------------------------------------

*scope* can be one of *global*, *buffer* or *window* (See
<<scopes#,`:doc scopes`>>).

*hook_name* must be one of the hook names in the list below, like `InsertKey`
or `BufSetOption`.

*filtering_regex* must match the entire parameter string in order for the
commands to be executed.

*command* is a string containing the commands to execute when the hook
is called.

For *switches*, see <<commands#hooks,`:doc commands hooks`>>.

If a hook is registered with the `-group` switch, it can later be removed with
the `remove-hooks` command:

----------------------------
remove-hooks <scope> <group>
----------------------------

This command removes all hooks originally registered in *scope* whose
`-group` switch matches the regex *group*.

For example to automatically use line numbering with .cc files, use the
following command:

--------------------------------------------------------------
hook global WinCreate .*\.cc %{ add-highlighter number-lines }
--------------------------------------------------------------

== Default hooks

The parameter string associated with each hook is described after the hook
name. Hooks with no description will always use an empty string.

*NormalIdle*::
    a certain duration has passed since the last keypress in normal mode

*NormalKey* `key`::
    a key is received in normal mode. This hook will not trigger when the user
    presses a key on the left-hand side of a normal-mode mapping (see
    <<mapping#,`:doc mapping`>>), but will trigger for keys on the right-hand
    side. See also `RawKey` below.

*InsertIdle*::
    a certain duration has passed since the last keypress in insert mode

*InsertKey* `key`::
    a key is received in insert mode. This hook will not trigger when the user
    presses a key on the left-hand side of a insert-mode mapping (see
    <<mapping#,`:doc mapping`>>), but will trigger for keys on the right-hand
    side. See also `RawKey` below.

*InsertChar* `char`::
    a character is received in insert mode

*InsertDelete* `deleted char`::
    a character is deleted in insert mode

*InsertMove* `move key`::
    the cursor moved (without inserting) in insert mode

*PromptIdle*::
    a certain duration has passed since the last keypress in prompt mode

*WinCreate* `buffer name`::
    a window was created. This hook is executed in draft context, so any
    changes to selections or input state will be discarded.

*WinClose* `buffer name`::
    a window was destroyed. This hook is executed in a draft context, so any
    changes to selections or input state will be discarded.

*WinResize* `<line>.<column>`::
    a window was resized. This hook is executed in a draft context, so any
    changes to selections or input state will be discarded.

*WinDisplay* `buffer name`::
    a client switched to displaying the given buffer.

*WinSetOption* `<option_name>=<new_value>`::
    an option was set in a window context. This hook is executed in a draft
    context, so any changes to selections or input state will be discarded.

*GlobalSetOption* `<option_name>=<new_value>`::
    an option was set at the global scope

*BufSetOption* `<option_name>=<new_value>`::
    an option was set in a buffer context

*BufNewFile* `filename`::
    a buffer for a new file has been created

*BufOpenFile* `filename`::
    a buffer for an existing file has been created

*BufCreate* `filename`::
    a buffer has been created

*BufWritePre* `filename`::
    executed just before a buffer is written

*BufWritePost* `filename`::
    executed just after a buffer is written

*BufReload* `filename`::
    executed after a buffer reload has been triggered by an external
    modification to its file

*BufClose* `buffer name`::
    executed when a buffer is deleted, while it is still valid

*BufOpenFifo* `buffer name`::
    executed when a buffer opens a fifo

*BufReadFifo* `<start line>.<start column>,<end line>.<end column>`::
    executed after some data has been read from a fifo and inserted in
    the buffer. The hook param contains the range of text that was just
    inserted, in a format compatible with the `select` command.

*BufCloseFifo*::
    executed when a fifo buffer closes its fifo file descriptor either
    because the buffer is being deleted or the writing end has been closed

*ClientCreate* `client name`::
    executed when a new client is created.

*ClientClose* `client name`::
    executed when a client is closed, after it was removed from the client
    list.

*RuntimeError* `error message`::
    an error was encountered while executing a user command

*ModeChange* `[push|pop]:<old mode>:<new mode>`::
    Triggered whenever a mode is pushed or removed from the mode stack.
    The mode name can be things like 'normal' or 'insert' for regular
    interactive modes, or 'next-key[<name>]' for sub-modes where Kakoune
    prompts for a key. For example, `g` in normal mode pushes 'next-key[goto]'
    mode, the `enter-user-mode foo` command pushes 'next-key[user.foo]' mode,
    and the `on-key -mode-name bar` command pushes 'next-key[bar]' mode.

*KakBegin* `session name`::
    Kakoune has started, this hook is called just after reading the user
    configuration files

*KakEnd*::
    Kakoune is quitting

*FocusIn* `client name`::
    on supported clients, triggered when the client gets focused

*FocusOut* `client name`::
    on supported clients, triggered when the client gets unfocused

*InsertCompletionShow*::
    Triggered when the insert completion menu gets displayed

*InsertCompletionHide* `completion`::
    Triggered when the insert completion menu gets hidden, the list of
    inserted completions text ranges is passed as filtering text, in the
    same format the `select` command expects.

*RawKey* `key`::
    Triggered whenever a key is pressed by the user, regardless of what mode
    Kakoune is in, or what mappings are present (see
    <<mapping#,`:doc mapping`>>). It cannot be triggered by `execute-keys`,
    even with the `-with-hooks` option (see
    <<execeval#execute-keys-specific-switches,`:doc execeval execute-keys-specific-switches`>>).

*RegisterModified* `register`::
    Triggered after a register has been written to.

*ModuleLoaded* `module`::
    Triggered after a module is evaluated by the first `require-module` call

*User* `param`::
    Triggered  via the `trigger-user-hook` command. Provides a way for plugins
    to introduce custom hooks by specifying what *param* would be.

Note that some hooks will not consider underlying scopes depending on what
context they are bound to be run into, e.g. the `BufWritePost` hook is a buffer
hook, and will not consider the `window` scope.

While defining hook commands with a `%sh{}` block, some additional env
vars are available:

* `kak_hook_param`: filtering text passed to the currently executing hook

* `kak_hook_param_capture_N`: text captured by the hook filter regex capturing
    group N, N can either be the capturing group number, or its name
    (See <<regex#groups,`:doc regex groups`>>).

== Disabling Hooks

Hooks can be disabled temporarily by prefixing any normal mode command by `\`
(see <<keys#,`:doc keys`>>) and permanently by setting the `disabled_hooks` option
which accepts a regex describing which hooks won't be executed. For example
indentation hooks can be disabled with '.*-indent'.

Finally, hook execution can be disabled while using the `execute-keys` or
`evaluate-commands` commands by using the `-no-hooks` switch.
(See <<execeval#,`:doc execeval`>>)

As an exception to these rules, hooks declared with the `-always` switch
are triggered no matter what. A good use case is doing some cleanup on `BufCloseFifo`.

= Keymap

---
┌───────┬───────┬───────┬───────┬───────┬───────┬───────┬───────┬───────┬───────┬───────┬───────┬───────┲━━━━━━━━━━━━━━┓
│  upper│ cmdout│convtab│       │selpipe│sel all│       │  align│pattern│ rotate│ rotate│   trim│       ┃ ⇤            ┃
├┄┄CASE┄┼┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┨              ┃
│  lower│ 1     │ 2     │ 3     │ 4     │ 5     │ 6     │ 7     │ 8     │ 9     │ 0     │       │       ┃              ┃
┢━━━━━━━┷━━━┱───┴───┬───┴───┬───┴───┬───┴───┬───┴───┬───┴───┬───┴───┬───┴───┬───┴───┬───┴───┬───┴───┬───┺━━━┳━━━━━━━━━━┫
┃ ↹         ┃ record│     ᵐʷ│     ᵐʷ│  paste│     ᵐʳ│       │  redo │ INSERT│  above│ before│      ᵐ│      ᵐ┃          ┃
┃           ┠┄MACRO┄┤   next│   word├REPLACE┤to char├┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┼┄OPEN┄┄┼┄PASTE┄┤ object│ object┃ ⏎        ┃
┃           ┃ replay│   word│    end│   char│       │  yank │  undo │ insert│  below│  after│  begin│    end┃          ┃
┣━━━━━━━━━━━┻━┱─────┴─┬─────┴─┬─────┴─┬─────┴─┬─────┴─┬─────┴─┬─────┴─┬─────┴─┬─────┴─┬─────┴─┬─────┴─┬─────┺━┓        ┃
┃ ⇬           ┃ APPEND│  split│       │     ᵐʳ│     ᵐᵍ│     ᵐˡ│      ᵐ│      ᵐ│     ᵐˡ│cmdline│use reg│   pipe┃        ┃
┃             ┠┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┤   find│  goto │       │       │       │       ├┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┨        ┃
┃             ┃ append│ select│ delete│   char│       │     ← │     ↓ │     ↑ │     → │ cursor│       │eschook┃        ┃
┣━━━━━━━━━┳━━━┹───┬───┴───┬───┴───┬───┴───┬───┴───┬───┴───┬───┴───┬───┴───┬───┴───┬───┴───┬───┴───┲━━━┷━━━━━━━┻━━━━━━━━┫
┃         ┃ indent│   save│      ᵐ│copysel│      ᵛ│     ᵐʷ│     ᵐʳ│     ᵐʳ│ dedent│ indent│     ᵐʳ┃                    ┃
┃         ┠┄┄┄┄┄┄┄┼┄MARKS┄┤ select├┄┄┄┄┄┄┄┤   view│   prev│ search│  match├┄┄┄┄┄┄┄┼┄┄┄┄┄┄┄┤ search┃                    ┃
┃ ⇧       ┃ dedent│restore│   line│ change│   cmds│   word│   next│   char│clrsels│ repeat│       ┃ ⇧                  ┃
┣━━━━━━━━━┻┳━━━━━━┷━━━┳━━━┷━━━━━┱─┴───────┴───────┴───────┴───────┴───────┴─┲━━━━━┷━━━━┳━━┷━━━━━━━╋━━━━━━━━━┳━━━━━━━━━━┫
┃          ┃          ┃         ┃                                           ┃          ┃          ┃         ┃          ┃
┃          ┃          ┃         ┃                user mappings              ┃          ┃          ┃         ┃          ┃
┃Ctrl      ┃          ┃Alt      ┃                                           ┃AltGr     ┃          ┃         ┃Ctrl      ┃
┗━━━━━━━━━━┻━━━━━━━━━━┻━━━━━━━━━┹───────────────────────────────────────────┺━━━━━━━━━━┻━━━━━━━━━━┻━━━━━━━━━┻━━━━━━━━━━┛

 ʳ: alt reverses direction
 ʷ: alt uses WORD instead of word (that is non blank instead of [a-z_])
 ᵐ: move, shifted will append to selection, alt will use alternate behaviour.
 ˡ: alt goes to begin/end of line
 ᵍ: the g key prefixes different goto location functionalities, such as going
    to begin/end of the file, opening the file whose name is selected, etc…
 ᵛ: the v key prefixes different view related functionalities, such as scrolling
---

= Keys

== Key Syntax

Usual keys are written using their ascii character, including capital
keys. Non printable keys use an alternate name, written between *<*
and *>*, such as *<esc>* or *<del>*. Modified keys are written between
*<* and *>* as well, with the modifier specified as either *c* for
Control, *a* for Alt, or *s* for Shift, followed by a *-* and the key (either
its name or ascii character), for example *<c-x>*, *<a-space>*, *<c-a-w>*.

In order to bind some keys to arbitrary ones, refer to <<mapping#,`:doc mapping`>>

== Insert mode

*<esc>*::
    leave insert mode

*<backspace>*::
    delete characters before cursors

*<del>*::
    delete characters under cursors

*<left>*, *<right>*, *<up>*, *<down>*::
    move the cursors in given direction

*<home>*::
    move cursors to line begin

*<end>*::
    move cursors to end of line

*<c-r>*::
    insert contents of the register given by next key

*<c-v>*::
    insert next keystroke directly into the buffer, without interpreting it

*<c-u>*::
    commit changes up to now as a single undo group

*<a-;>*, *<a-semicolon>*::
    escape to normal mode for a single command

== Insert mode completion

The `completers` option controls automatic completion, which kicks in when
the value specified in the `idle_timeout` option is reached.

*<c-o>*::
    toggle automatic completion

*<c-n>*::
    select next completion candidate

*<c-p>*::
    select previous completion candidate

*<c-x>*::
    explicit insert completion query, followed by:

    *f*:::
        explicit file completion

    *w*:::
        explicit word completion (current buffer)

    *W*:::
        explicit word completion (all buffers)

    *l*:::
        explicit line completion (current buffer)

    *L*:::
        explicit line completion (all buffers)

== Using Counts

In normal mode, commands can be prefixed with a numeric `count`, which can control
the command behaviour.

For example, *3W* selects 3 consecutive words and *3w* select the third word on
the right of the end of each selection.

== Disabling Hooks

Any normal mode command can be prefixed with `\` which will disable hook execution
for the duration for the command (including the duration of modes the command could
move to, so `\i` will disable hooks for the whole insert session) (see
<<hooks#,`:doc hooks`>>).

As autoindentation is implemented in terms of hooks, this can be used to disable
it when pasting text.

== Movement

'word' is a sequence of alphanumeric characters, or those in the `extra_word_chars`
option (see <<options#builtin-options,`:doc options builtin-options`>>).
'WORD' is a sequence of non whitespace characters. Generally, a movement on its own
will move each selection to cover the text moved over, while holding down
the Shift modifier and moving will extend each selection instead.

*h*::
    select the character on the left of the end of each selection
    `<left>` maps to this by default.
    (See <<mapping#default-mappings,`:doc mapping default-mappings`>>)

*j*::
    select the character below the end of each selection
    `<down>` maps to this by default.
    (See <<mapping#default-mappings,`:doc mapping default-mappings`>>)

*k*::
    select the character above the end of each selection
    `<up>` maps to this by default.
    (See <<mapping#default-mappings,`:doc mapping default-mappings`>>)

*l*::
    select the character on the right of the end of each selection
    `<right>` maps to this by default.
    (See <<mapping#default-mappings,`:doc mapping default-mappings`>>)

*w*::
    select the word and following whitespaces on the right of the end of each selection

*b*::
    select preceding whitespaces and the word on the left of the end of each selection

*e*::
    select preceding whitespaces and the word on the right of the end of each selection

*<a-[wbe]>*::
    same as [wbe] but select WORD instead of word

*f*::
    select to the next occurrence of given character

*t*::
    select until the next occurrence of given character

*<a-[ft]>*::
    same as [ft] but in the other direction

*<a-.>*::
    repeat last object or *f*/*t* selection command

*m*::
    select to the next sequence enclosed by matching characters, see the
    `matching_pairs` option in <<options#,`:doc options`>>

*M*::
    extend the current selection to the next sequence enclosed by matching
    character, see the `matching_pairs` option in <<options#,`:doc options`>>

*<a-m>*::
    select to the previous sequence enclosed by matching characters, see the
    `matching_pairs` option in <<options#,`:doc options`>>

*<a-M>*::
    extend the current selection to the previous sequence enclosed by matching
    characters, see the `matching_pairs` option in <<options#,`:doc options`>>

*x*::
    expand selections to contain full lines (including end-of-lines)

*<a-x>*::
    trim selections to only contain full lines (not including last
    end-of-line)

*%*, *<percent>*::
    select whole buffer

*<a-h>*::
    select to line begin
    `<home>` maps to this by default.
    (See <<mapping#default-mappings,`:doc mapping default-mappings`>>)

*<a-l>*::
    select to line end
    `<end>` maps to this by default.
    (See <<mapping#default-mappings,`:doc mapping default-mappings`>>)

*<pageup>, <c-b>*::
    scroll one page up

*<pagedown>, <c-f>*::
    scroll one page down

*<c-u>*::
    scroll half a page up

*<c-d>*::
    scroll half a page down

*;*, *<semicolon>*::
    reduce selections to their cursor

*<a-;>*, *<a-semicolon>*::
    flip the direction of each selection

*<a-:>*::
    ensure selections are in forward direction (cursor after anchor)

== Changes

Yanking (copying) and pasting use the *"* register by default (See <<registers#,`:doc registers`>>)

*i*::
    enter insert mode before selections

*a*::
    enter insert mode after selections

*d*::
    yank and delete selections

*c*::
    yank and delete selections and enter insert mode

*.*::
    repeat last insert mode change (*i*, *a*, or *c*, including the
    inserted text)

*<a-d>*::
    delete selections (not yanking)

*<a-c>*::
    delete selections and enter insert mode (not yanking)

*I*::
    enter insert mode at the beginning of the lines containing
    the start of each selection

*A*::
    enter insert mode at the end of the lines containing
    the end of each selection

*o*::
    enter insert mode in a new line (or in a given `count` of new lines)
    below the end of each selection

*O*::
    enter insert mode in a new line (or in a given `count` of new lines)
    above the beginning of each selection

*<a-o>*::
    add an empty line below cursor

*<a-O>*::
    add an empty line above cursor

*y*::
    yank selections

*p*::
    paste after the end of each selection

*P*::
    paste before the beginning of each selection

*<a-p>*::
    paste all after the end of each selection, and select each pasted string

*<a-P>*::
    paste all before the start of each selection, and select each pasted string

*R*::
    replace selections with yanked text

*<a-R>*::
    replace selections with every yanked text

*r*::
    replace each character with the next entered one

*<a-j>*::
    join selected lines

*<a-J>*::
    join selected lines and select spaces inserted in place of line breaks

*<a-_>*::
    merge contiguous selections together (works across lines as well)

*<+>*, *<plus>*::
    duplicate each selection (generating overlapping selections)

*<a-+>*, *<a-plus>*::
    merge overlapping selections

*>*, *<gt>*::
    indent selected lines

*<a\->>*, *<a-gt>*::
    indent selected lines, including empty lines

*<*, *<lt>*::
    unindent selected lines

*<a-<>*, *<a-lt>*::
    unindent selected lines, do not remove incomplete indent (3 leading
    spaces when indent is 4)

*u*::
    undo last change

*<a-u>*::
    move backward in history

*U*::
    redo last change

*<a-U>*::
    move forward in history

*&*::
    align selections, align the cursor of each selection by inserting spaces
    before the first character of each selection

*<a-&>*::
    copy indent, copy the indentation of the main selection (or the
    `count` one if a `count` is given) to all other ones

*`*::
    to lower case

*~*::
    to upper case

*<a-`>*::
    swap case

*@*::
    convert tabs to spaces in each selection, uses the buffer tabstop
    option or the `count` parameter for tabstop

*<a-@>*::
    convert spaces to tabs in each selection, uses the buffer tabstop
    option or the `count` parameter for tabstop

*_*::
    unselect whitespace surrounding each selection, drop those that only
    contain whitespace

*<a-)>*::
    rotate selections content, if specified, the `count` groups selections,
    so the following command

----------
    3<a-)>
----------

    rotates (1, 2, 3) and (3, 4, 6) independently

*<a-(>*::
    rotate selections content backward

== Changes through external programs

Shell expansions are available, (See <<expansions#shell-expansions,`:doc expansions shell-expansions`>>)
The default command comes from the *|* register (See <<registers#,`:doc registers`>>)

*|*::
    pipe each selection through the given external filter program and
    replace the selection with its output.

*<a-|>*::
    pipe each selection through the given external filter program and
    ignore its output.

*!*::
    insert and select command output before each selection.

*<a-!>*::
    append and select command output after each selection.

== Searching

Searches use the */* register by default (See <<registers#,`:doc registers`>>)

*/*::
    select next match after each selection

*<a-/>*::
    select previous match before each selection

*?*::
    extend to next match after each selection

*<a-?>*::
    extend to previous match before each selection

*n*::
    select next match after the main selection

*N*::
    add a new selection with next match after the main selection

*<a-n>*::
    select previous match before the main selection

*<a-N>*::
    add a new selection with previous match before the main selection

***::
    set the search pattern to the main selection (automatically
    detects word boundaries)

*<a-***>*::
    set the search pattern to the main selection (verbatim, no smart
    detection)

== Goto commands

*g*, *G*::
    When a `count` is specified, *G* only extends the selection to the given line,
    *g* sends the anchor to the given line and a menu is then displayed which waits
    for one of the following additional keys:

    *h*:::
        go to line begin

    *l*:::
        go to line end

    *i*:::
        go to non blank line start

    *g*, *k*:::
        go to the first line

    *j*:::
        go to the last line

    *e*:::
        go to last char of last line

    *t*:::
        go to the first displayed line

    *c*:::
        go to the middle displayed line

    *b*:::
        go to the last displayed line

    *a*:::
        go to the previous (alternate) buffer

    *f*:::
        open the file whose name is selected

    *.*:::
        go to last buffer modification position

== View commands

*v*, *V*::
    *V* enters lock view mode (which will be left when the <esc> is hit),
    and *v* modifies the current view; a menu is then displayed which waits
    for one of the following additional keys:

    *v*, *c*:::
        center the main selection in the window (vertically)

    *m*:::
        center the main selection in the window (horizontally)

    *t*:::
        scroll to put the main selection on the top line of the window

    *b*:::
        scroll to put the main selection on the bottom line of the window

    *h*:::
        scroll the window `count` columns left

    *j*:::
        scroll the window `count` line downward

    *k*:::
        scroll the window `count` line upward

    *l*:::
        scroll the window `count` columns right

== Marks

Current selections position can be saved in a register and restored later on.
Marks use the *^* register by default (See <<registers#,`:doc registers`>>)

*Z*::
    save selections to the register

*z*::
    restore selections from the register

*<a-z>*, *<a-Z>*::
    *<a-z>* combines selections from the register with the current ones, whereas
    *<a-Z>* combines current selections with the ones in the register; a menu
    is then displayed which waits for one of the following additional keys:

    *a*:::
        append selections

    *u*:::
        keep a union of selections

    *i*:::
        keep an intersection of selections

    *<*:::
        select the selection with the leftmost cursor for each pair

    *>*:::
        select the selection with the rightmost cursor for each pair

    *+*:::
        select the longest selection

    *-*:::
        select the shortest selection

== Macros

Macros use the *@* register by default (See <<registers#,`:doc registers`>>)

*Q*::
    start or end macro recording

*q*::
    play a recorded macro

*<esc>*::
    end macro recording

== Jump list

Some commands, like the goto commands, buffer switch or search commands,
push the previous selections to the client's jump list. It is possible
to skim through the jump list using:

*<c-i>*::
    jump forward

*<c-o>*::
    jump backward

*<c-s>*::
    create a jump step, but also save the current selection to have it be
    restored when the step is subsequently cycled through

== Multiple selections

*s*, *S*, *<a-k>* and *<a-K>* use the */* register by default (See <<registers#,`:doc registers`>>)

*s*::
    create a selection for each match of the given regex
    (selects the count capture if it is given)

*S*::
    split selections with the given regex
    (selects the count capture if it is given)

*<a-s>*::
    split selections on line boundaries

*<a-S>*::
    select first and last characters of each selection

*C*::
    duplicate selections on the lines that follow them

*<a-C>*::
    duplicate selections on the lines that precede them

*,*::
    clear selections to only keep the main one

*<a-,>*::
    clear the main selection

*<a-k>*::
    keep selections that match the given regex

*<a-K>*::
    clear selections that match the given regex

*$*::
    pipe each selection to the given shell command and keep the ones
    for which the shell returned 0. Shell expansions are available,
    (See <<expansions#shell-expansions,`:doc expansions shell-expansions`>>)

*)*::
    rotate main selection (the main selection becomes the next one)

*(*::
    rotate main selection backward (the main selection becomes the previous one)

== Object Selection

For nestable objects, a `count` can be used in order to specify which surrounding
level to select. Object selections are repeatable using *<a-.>*.

=== Whole object

A 'whole object' is an object *including* its surrounding characters.
For example, for a quoted string this will select the quotes, and
for a word this will select trailing spaces.

*<a-a>*::
    select the whole object

*[*::
    select to the whole object start

*]*::
    select to the whole object end

*{*::
    extend selections to the whole object start

*}*::
    extend selections to the whole object end

=== Inner object

An 'inner object' is an object *excluding* its surrounding characters.
For example, for a quoted string this will *not* select the quotes, and
for a word this will *not* select trailing spaces.

*<a-i>*::
    select the inner object

*<a-[>*::
    select to the inner object start

*<a-]>*::
    select to the inner object end

*<a-{>*::
    extend selections to the inner object start

*<a-}>*::
    extend selections to the inner object end

=== Objects types

After the keys described above, a second key needs to be entered
in order to specify the wanted object:

*b*, *(*, *)*::
    select the enclosing parenthesis

*B*, *{*, *}*::
    select the enclosing {} block

*r*, *[*, *]*::
    select the enclosing [] block

*a*, *<*, *>*::
    select the enclosing <> block

*Q*, *"*::
    select the enclosing double quoted string

*q*, *'*::
    select the enclosing single quoted string

*g*, *`*::
    select the enclosing grave quoted string

*w*::
    select the whole word

*<a-w>*::
    select the whole WORD

*s*::
    select the sentence

*p*::
    select the paragraph

*␣*::
    select the whitespaces

*i*::
    select the current indentation block

*n*::
    select the number

*u*::
    select the argument

*c*::
    select user defined object, will prompt for open and close text

*<a-;>*, *<a-semicolon>*::
    run a command with additional expansions describing the selection
    context (See <<expansions#,`:doc expansions`>>)

If a punctuation character is entered, it will act as the delimiter.
For instance, if the cursor is on the `o` of `/home/bar`, typing
`<a-a>/` will select `/home/`.

== Prompt commands

When pressing `:` in normal mode, Kakoune will open a prompt to enter
a command.  The executed command line is stored in the *:* register
(See <<registers#,`:doc registers`>>).

During editing, a transient *clipboard* is available, its content is
empty at the start of prompt edition, and is not preserved afterwards.

The following keys are recognized by this mode to help with editing
(See <<commands#,`:doc commands`>>).

*<ret>*::
    validate prompt

*<esc>*::
    abandon without validating prompt

*<left>*, *<c-b>*::
    move cursor to previous character

*<right>*, *<c-f>*::
    move cursor to next character

*<home>*, *<c-a>*::
    move cursor to first character

*<end>*, *<c-e>*::
    move cursor past the last character

*<backspace>*, *<c-h>*::
    erase character before cursor

*<del>*, *<c-d>*::
    erase character under cursor

*<a-f>*::
    advance to next word begin

*<a-F>*::
    advance to next WORD begin

*<a-b>*::
    go back to previous word begin

*<a-B>*::
    go back to previous WORD begin

*<a-e>*::
    advance to next word end

*<a-E>*::
    advance to next WORD end

*<c-w>*::
    erase to previous word begin, save erased content to *clipboard*

*<c-W>*::
    erase to previous WORD begin, save erased content to *clipboard*

*<a-d>*::
    erase to next word begin, save erased content to *clipboard*

*<a-D>*::
    erase to next WORD begin, save erased content to *clipboard*

*<c-k>*::
    erase to end of line, save erased content to *clipboard*

*<c-u>*::
    erase to begin of line, save erased content to *clipboard*

*<c-y>*::
    insert *clipboard* content before cursor

*<up>*, *<c-p>*::
    select previous entry in history

*<down>*, *<c-n>*::
    select next entry in history

*<tab>*::
    select next completion candidate

*<s-tab>*::
    select previous completion candidate

*<c-r>*::
    insert then content of the register given by next key, if next key
    has the Alt modifier, it will insert all values in the register
    joined with spaces, else it will insert the main one

*<c-v>*::
    insert next keystroke without interpreting it

*<c-x>*::
    explicit completion query, followed by:

    *f*:::
        explicit file completion

    *w*:::
        explicit word completion (from current buffer)

*<c-o>*::
    toggle automatic completion

*<a-!>*::
    expand the typed expansions in currently entered text
    (See <<expansions#,`:doc expansions`>>)

*<a-;>*, *<a-semicolon>*::
    escape to normal mode for a single command

== User commands

*<space>*::
    enter default `user mode` to access custom commands
    (See <<modes#user-mode,`:doc modes user-mode`>>)

= Mapping

== Description

Creating and removing shortcuts boils down to the following commands,
respectively:

---------------------------------------
map [switches] <scope> <mode> <key> <keys>
unmap <scope> <mode> <key> [<expected>]
---------------------------------------

The *map* command makes *key* behave as if the *keys* sequence was typed.

*mode* dictates in what context the mapping will be available:

    *insert*::
        insert mode

    *normal*::
        normal mode

    *prompt*::
        prompts, such as when entering a command through *:*, or a regex through */*

    *menu*::
        mode entered when a menu is displayed with the 'menu' command

    *user*::
        mode entered when the user prefix is hit (default: ',')

    *goto*::
        mode entered when the goto key is hit (default: 'g')

    *view*::
        mode entered when the view key is hit (default: 'v')

    *object*::
        mode entered when an object selection is triggered (e.g. '<a-i>')

The context of execution of the above modes is always the current one at the
time of execution of the mapping, except for *user* mode (always executed
in a 'normal' context). Refer to <<modes#,`:doc modes`>> for more details.

An optional *-docstring* switch followed by a string can be used
to describe what the mapping does. This docstring will be used
in autoinfo boxes.

The *unmap* command removes a mapping of *key* in the given *scope* and
*mode*. If *expected* is specified, the mapping is removed only if it is
set to the same sequence of keys passed using the *expected* argument.

For more information about the values of the *scope* parameter, refer to
<<scopes#,`:doc scopes`>>.

== Mapping commands

It's common to use a normal-mode or user-mode mapping to trigger a command,
like this:

----
map global user n :make-next-error<ret>
----

If you make a normal-mode mapping, you can prefix it with a count or a register
name like any other normal-mode key. You can forward this information to the
command you invoke with the `%val{count}` and `%val{register}` expansions
(See <<expansions#`:doc expansions`>>). For example:

----
map global normal = ':echo Got count %val{count} and reg %val{register}<ret>'
----

== Mappable keys

See <<keys#,`:doc keys`>> to discover the list of default bindings.

For *key* and *keys* in the *map* command, the following key names can
be used:

*x*, *<x>*::
    Most keys, especially alphabetic keys, represent themselves.
    Keys can also be wrapped in angle-brackets for consistency
    with the non-alphabetic keys below.

*<c-x>*::
    Holding down Control while pressing the *x* key.

*<a-x>*::
    Holding down Alt while pressing the *x* key.

*<s-x>*, *X*, *<X>*, *<s-X>*::
    Holding down Shift while pressing the *x* key.
    *<s-x>*, *<s-X>* and *<X>* are treated as the same key. The *s-* modifier
    only works with ASCII letters and cannot be used with other printable keys
    (non-ASCII letters, digits, punctuation) because their shift behaviour
    depends on your keyboard layout. The *s-* modifier _can_ be used with
    special keys like *<up>* and *<tab>*.

*<c-a-x>*::
    Holding down Control and Alt while pressing the *x* key.

*<lt>*, *<gt>*::
    The *<* and *>* characters.

*<plus>*, *<minus>*::
    The *+* and *-* characters.

*<ret>*::
    The Return or Enter key.

*<space>*::
    The space bar.

*<tab>*::
    The Tab key.

*<backspace>*::
    The Backspace (delete to the left) key.

*<del>*::
    The Delete (to the right) key.

*<esc>*::
    The Escape key.

*<up>*, *<down>*, *<left>*, *<right>*::
*<pageup>*, *<pagedown>*, *<home>*, *<end>*::
    The usual cursor-movement keys.

*<ins>*::
    The Insert key.

*<F1>*, *<F2>*, ...*<F12>*::
    Function keys.

*<semicolon>*, *<percent>*::
    The *;* and *%* characters, these keys allow reducing the amount of
    backslash escaping in scripts (for example, `exec \%` becomes `exec
    <percent>`)

NOTE: Although Kakoune allows many key combinations to be mapped, not every
possible combination can be triggered. For example, due to limitations in
the way terminals handle control characters, mappings like *<c-s-a>* are
unlikely to work in Kakoune's terminal UI.

== Default mappings

Some mappings exist by default in the global scope:

In normal mode:

  * `<left>`  maps to `h`
  * `<right>` maps to `l`
  * `<up>`    maps to `k`
  * `<down>`  maps to `j`
  * `<home>`  maps to `<a-h>`
  * `<end>`   maps to `<a-l>`

Shift version of those mappings exist as well
(for example `<s-left>` maps to `H`).

= Modes

== Description

Kakoune is a modal editor which means that keys have different effects depending
on the current mode. Therefore, modes can be conceptualized as a way to group
related behaviors together during a text editing workflow.

Kakoune starts in Normal mode. A few keys let users enter other modes
where they can focus on a specific task before going back to Normal mode.

Modes are stored in a stack with the top of the stack being the active mode.
So in some scenarios, the Normal mode may feel *nested* in another one.
The `ModeChange` hook is triggered each time a mode is popped or pushed
on this stack. See <<hooks#,`:doc hooks`>>

To get a comprehensive list of commands available for each modes, see
<<keys#,`:doc keys`>>. Most of them are described in *info* boxes in
real-time if the `autoinfo` option is set.

To customize key mappings in various modes, refer to <<mapping#,`:doc mapping`>>.

== Builtin modes

=== Normal mode

Normal mode is the default mode. It provides commands to manipulate
selections, such as general movement, text object selection, searching,
splitting, and commands to manipulate the text underlying the current
selections, such as yanking, pasting, deleting…

It also provides commands to enter other modes.

See normal commands <<keys#movement,`:doc keys movement`>>.

=== Insert mode

Insert mode provides an efficient way to interactively write text into
the buffer. Most keys will insert their corresponding characters before
every selections cursors. It also provides completion support for inserted
text along with some commands for basic movement.

Insert mode can be entered from Normal modes through a set of commands
such as `i` to insert before selection, `a` to insert after selection,
`o` to insert in a new line below selections… It can then be exited with
`<esc>` to return to Normal mode.

See changes <<keys#changes,`:doc keys changes`>>.

From Insert mode, `<a-;>` provides a way to temporarily enter a new
Normal mode for a single command, before returning to Insert mode.

See insert commands <<keys#insert-mode,`:doc keys insert-mode`>>.

=== Goto mode

Goto mode provides commands dedicated to jumping either inside a buffer
(such as jumping to buffer start/end, window top/bottom) or to another
(such as jumping to the file whose path is currently selected).

See goto commands <<keys#goto-commands,`:doc keys goto-commands`>>.

=== View mode

View mode provides commands dedicated to controlling the window, such
as scrolling or centering the main selection cursor.

See view commands <<keys#view-commands,`:doc keys view-commands`>>.

=== Menu mode

Menu mode is entered when a menu is displayed with the `menu` command.
Mappings are used to filter and select intended items.

=== Prompt mode

Mode entered with `:`, `/` or the `prompt` command. During prompt mode a
line of text is edited and then validated with `<ret>` or abandoned with
`<esc>`.

See prompt commands <<keys#prompt-commands,`:doc keys prompt-commands`>>.

=== Object mode

Mode entered with `<a-i>`, `<a-a>` and various combinations of `[]{}` keys.
It aims at crafting semantic selections, often called *text-objects*.

See object commands <<keys#object-selection,`:doc keys object-selection`>>.

=== User mode

Mode entered with `<space>`. The user mode is empty by default and is the
opportunity to store custom mappings with no risk to shadow builtin ones.
The context of execution is always the Normal mode.

== User modes

The following two commands are useful in advanced use cases, when the
builtin User mode gets too crowded by mappings competing for the same
key that deserves to be split in more meaningful collections. It's
mostly useful for plugin authors who want to bind their new commands in
extensible menus.

--------------------------------
declare-user-mode <name>
--------------------------------

Declare a new custom mode that can later be referred by the *map* command.
For example a `grep` custom mode to attach keys like `n` or `p` to skim
through the output results.

-------------------------------
enter-user-mode <name>
-------------------------------

Enable the designated mode for the next key. Docstrings are shown in the
automatic info box to increase discoverability. To keep illustrating
the aforementioned fictional `grep` mode, a normal mapping on `<a-g>`
could be used to enter this mode.

= Options

== Description

Kakoune can store named and typed values that can be used both to
customize the core editor behaviour, and to store data used by extension
scripts.

[[set-option]]
Options can be modified using the `set-option` command:

--------------------------------------------
set-option [-add|-remove] <scope> <name> <values>...
--------------------------------------------

<scope> can be *global*, *buffer*, *window* or *current* (See
<<scopes#,`:doc scopes`>>). *current* relates to the narrowest scope in
which the option is already set.

When the option is a list or a map, multiple <values> can be given as
separate arguments, or can be omitted altogether in order to empty the
option.

If `-add` or `-remove` is specified, the new value is respectively *added*
to or *removed* from the current one instead of replacing it (the exact
outcome depends on the type, see below).

[[unset-option]]
Options values can be unset in a specific scope with the `unset-option`
command:

---------------------------
unset-option <scope> <name>
---------------------------

Unsetting an option will make it fallback to the value of its parent scope,
hence options cannot be unset from the *global* scope.

[[declare-option]]
New options can be declared using the `declare-option` command:

---------------------------------------------------
declare-option [-hidden] <type> <name> [<value>...]
---------------------------------------------------

If `-hidden` is specified, the option will not be displayed in completion
suggestions.

[[update-option]]
Certain option type can be *updated*, usually to match potential changes
in the buffer they relate to. This can be triggered by the `update-option`
command:

----------------------------
update-option <scope> <name>
----------------------------

== Types

All options have a type, which defines how they are translated to/from
text and their set of valid values.

Some types are usable for user defined options while some other types
are exclusively available to built-in options.

*int*::
    an integer number.

    `set -add` performs a math addition. +
    `set -remove` performs a math substraction. +

*bool*::
    a boolean value, yes/true or no/false

*str*::
    a string, some freeform text

*regex*::
    as a string but the set commands will complain if the entered text
    is not a valid regex

*coord*::
    a line, column pair (separated by a comma)
    Cannot be used with `declare-option`

*<type>-list*::
    a list, elements are specified as separate arguments to the command.

    `set -add` appends the new element to the list. +
    `set -remove` removes each given element from the list. +

    Only `int-list` and `str-list` options can be created with
    `declare-option`.

*range-specs*::
    a timestamp (like `%val{timestamp}`,
    see <<expansions#value-expansions,`:doc expansions value-expansions`>>)
    followed by a list of range descriptors.

    Each range descriptor must use the syntax `a.b,c.d|string` or
    `a.b+length|string`, with:

        * _a_ is the line containing the first character

        * _b_ is the number of bytes from the start of the line to the
        first byte of the first character

        * _c_ is the line containing the last character

        * _d_ is the number of bytes from the start of the line to the
          first byte of the last character

        * _length_ is the length of the range in bytes, if 0 the range
          is empty, but still valid.

        * _string_ is an arbitrary string which is associated with
          the range. Any `|` or `\` characters must be escaped as `\|` or `\\`.

    All numeric fields are 1-based.

    When the command `update-option` is used on an option of this type,
    its ranges get updated according to all the buffer modifications
    that happened since its timestamp.

    `set -add` appends the new pairs to the list. +
    `set -remove` removes the given pairs from the list. +

    See <<highlighters#specs-highlighters,`:doc highlighters specs-highlighters`>>)

*line-specs*::
    a list of a line number and a corresponding flag (`<line>|<flag
    text>`), except for the first element which is just the timestamp
    of the buffer. When `update-option` is used on an option of this
    type, its lines get updated according to all the buffer modifications
    that happened since its timestamp.
    See <<highlighters#specs-highlighters,`:doc highlighters specs-highlighters`>>)

    `set -add` appends the new specs to the list. +
    `set -remove` removes the given specs from the list. +

    Any `|` or `\` characters that occur within `<flag text>` must be
    escaped as `\|` or `\\`.

*completions*::
    a list of `<text>|<select cmd>|<menu text>` candidates,
    except for the first element which follows the
    `<line>.<column>[+<length>]@<timestamp>` format to define where the
    completion apply in the buffer.
    Any `|` or `\` characters that occur within the `<text>`,
    `<select cmd>`, or `<menu text>` fields should be escaped as `\|`
    or `\\`.

    Options of this type are are meant to be added to the `completers`
    option to provide insert mode completion. Candidates are shown if the
    text typed by the user (between `<line>.<column>` and the cursor) is a
    subsequence of `<text>`.

    For each remaining candidate, the completion menu displays
    `<text>`, followed by `<menu text>`, which is a Markup string (see
    <<faces#markup-strings,`:doc faces markup-strings`>>).

    As the user selects items from the completion menu, the text they typed
    will be replaced with `<text>`, and the Kakoune command in
    `<select cmd>` is executed. The common use case is to display element
    specific documentation.

    `set -add` adds given completions to the list. +
    `set -remove` removes given completions from the list. +

*enum(value1|value2|...)*::
    an enum, taking one of the given values
    Cannot be used with `declare-option`

*flags(value1|value2|...)*::
    a set of flags, taking a combination of the given values joined by a
    '|' character.

    `set -add` adds the given flags to the combination. +
    `set -remove` removes the given flags to the combination. +

    Cannot be used with `declare-option`

*<type>-to-<type>-map*::
    a list of `key=value` pairs.

    `set -add` adds the given pair to the hashmap or replace an already
    existing key. +
    `set -remove` removes the given pair from the hashmap, if only the
    key is provided it removes that entry regardless of the associated
    value. +

    Only `str-to-str-map` options can be created with `declare-option`.

== Builtin options

*tabstop* `int`::
    _default_ 8 +
    width of a tab character

*indentwidth* `int`::
    _default_ 4 +
    width (in spaces) used for indentation, 0 means a tab character

*scrolloff* `coord`::
    _default_ 0,0 +
    number of lines, columns to keep visible around the cursor when
    scrolling

*eolformat* `enum(lf|crlf)`::
    _default_ lf +
    the format of end of lines when writing a buffer, this is autodetected
    on load; values of this option assigned to the `window` scope are
    ignored

*BOM* `enum(none|utf8)`::
    _default_ none +
    define if the file should be written with a unicode byte order mark;
    values of this option assigned to the `window` scope are ignored

*readonly* `bool`::
    _default_ false +
    prevent modifications from being saved to disk, all buffers if set
    to `true` in the `global` scope, or current buffer if set in the
    `buffer` scope; values of this option assigned to the `window`
    scope are ignored

*incsearch* `bool`::
    _default_ true +
    execute search as it is typed

*aligntab* `bool`::
    _default_ false +
    use tabs for alignment command

*autoinfo* `flags(command|onkey|normal)`::
    _default_ command|onkey +
    display automatic information box in the enabled contexts

*autocomplete* `flags(insert|prompt)`::
    _default_ insert|prompt +
    automatically display possible completions in the enabled modes.

*ignored_files* `regex`::
    filenames matching this regex won't be considered as candidates
    on filename completion (except if the text being completed already
    matches it)

*disabled_hooks* `regex`::
    hooks whose group matches this regex won't be executed. For example
    indentation hooks can be disabled with `.*-indent`.
    (See <<hooks#disabling-hooks,`:doc hooks`>>)

*filetype* `str`::
    arbitrary string defining the type of the file. Filetype dependent
    actions should hook on this option changing for activation/deactivation

*path* `str-list`::
    _default_ ./ %/ /usr/include +
    directories to search for *gf* command and filenames completion
    `%/` represents the current buffer directory

*completers* `completer-list`::
    _default_ filename word=all +
    completion engines to use for insert mode completion (they are tried
    in order until one generates candidates). Existing completers are:

    *word=all*, *word=buffer*:::
        which complete using words in all buffers (*word=all*)
        or only the current one (*word=buffer*)

    *filename*:::
        which tries to detect when a filename is being entered and
        provides completion based on local filesystem

    *line=all*, *line=buffer*:::
        which complete using lines in all buffers (*line=all*)
        or only the current one (*line=buffer*)

    *option=<opt-name>*:::
        where *opt-name* is an option of type 'completions' whose
        contents will be used

*static_words* `str-list`::
    list of words that are always added to completion candidates
    when completing words in insert mode

*extra_word_chars* `codepoint-list`::
    a list of all additional codepoints that should be considered
    part of a word, for the purposes of the `w`, `b`, and `e` commands
    (See <<keys#movement,`:doc keys movement`>>).
    If this option is empty, Kakoune pretends it contains an
    underscore, otherwise the value is used as-is.
    This must be set on the buffer, not the window,
    for word completion to offer words containing these codepoints.

*matching_pairs* `codepoint-list`::
    _default_ ( ) { } [ ] < > +
    a list of codepoints that are to be treated as matching pairs
    for the *m* command.

*autoreload* `enum(yes|no|ask)`::
    _default_ ask +
    auto reload the buffers when an external modification is detected

*writemethod* `enum(overwrite|replace)`::
    _default_ overwrite +
    method used to write buffers to file, `overwrite` will open the
    existing file and write on top of the previous data, `replace`
    will open a temporary file next to the target file, write it and
    then rename it to the target file.

*debug* `flags(hooks|shell|profile|keys|commands)`::
    dump various debug information in the '\*debug*' buffer

*idle_timeout* `int`::
    _default_ 50 +
    timeout, in milliseconds, with no user input that will trigger the
    *PromptIdle*, *InsertIdle* and *NormalIdle* hooks, and autocompletion.

*fs_check_timeout* `int`::
    _default_ 500 +
    timeout, in milliseconds, between checks in normal mode of modifications
    of the file associated with the current buffer on the filesystem.

*modelinefmt* `string`::
    A format string used to generate the mode line, that string is
    first expanded as a command line would be (expanding '%...{...}'
    strings), then markup tags are applied (see
    <<faces#markup-strings,`:doc faces markup-strings`>>)
    Two special atoms are available as markup:

        *`{{mode_info}}`*:::
            Information about the current mode, such as `insert 3 sel` or
            `prompt`. The faces used are StatusLineMode, StatusLineInfo,
            and StatusLineValue.

        *`{{context_info}}`*:::
            Information such as `[+][recording (@)][no-hooks][new file][fifo]`,
            in face Information.

    The default value is '%val{bufname} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}} - %val{client}@[%val{session}]'

*ui_options* `str-to-str-map`::
    a list of `key=value` pairs that are forwarded to the user
    interface implementation. The NCurses UI supports the following options:

        *terminal_set_title*:::
            if *yes* or *true*, the terminal emulator title will
            be changed

        *terminal_status_on_top*:::
            if *yes*, or *true* the status line will be placed
            at the top of the terminal rather than at the bottom

        *terminal_assistant*:::
            specify the nice assistant displayed in info boxes,
            can be *clippy* (the default), *cat*, *dilbert* or *none*

        *terminal_enable_mouse*:::
            boolean option that enables mouse support

        *terminal_shift_function_key*:::
            Function key from which shifted function key start, if the
            terminal sends F13 for <s-F1>, this should be set to 12.

        *terminal_padding_char*:::
            character used to indicate the area out of the displayed buffer
            (defaults to '~')

        *terminal_padding_fill*:::
            if *yes* or *true*, fill the padding area with the padding character
            instead of displaying a single character at the beginning of the
            padding line (defaults to *false*)

        *terminal_synchronized*:::
            if *yes* or *true*, emit synchronized output escape sequences and
            reduce terminal output with sequences that could trigger flickering
            if unsynchronized (defaults to *false*)

[[startup-info]]
*startup_info_version* `int`::
    _default_ 0 +
    Controls which messages will be displayed in the startup info box, only messages
    relating to a Kakoune version greater than this value will be displayed. Versions
    are written as a single number: Like `20180413` for version `2018.04.13`

== Current values

The current value for an option can be viewed using
<<expansions#option-expansions, `:doc expansions option-expansions`>>.

For example, the current value of the `BOM` option can be displayed in the
status line using the `echo` command:

--------------
echo %opt{BOM}
--------------

The current values for all options can be dumped to the *\*debug*\* buffer using
the following command:

-------------
debug options
-------------

= Regex

== Regex syntax

Kakoune's regex syntax is inspired by ECMAScript, as defined by the
ECMA-262 standard (see <<regex#compatibility,:doc regex compatibility>>).

Kakoune's regex always runs on Unicode codepoint sequences, not on bytes.

== Literals

Every character except the syntax characters `\^$.*+?[]{}|().` match
themselves. Syntax characters can be escaped with a backslash so that
`\$` will match a literal `$`, and `\\` will match a literal `\`.

Some literals are available as escape sequences:

* `\f` matches the form feed character.
* `\n` matches the newline character.
* `\r` matches the carriage return character.
* `\t` matches the tabulation character.
* `\v` matches the vertical tabulation character.
* `\0` matches the null character.
* `\cX` matches the control-`X` character (`X` can be in `[A-Za-z]`).
* `\xXX` matches the character whose codepoint is `XX` (in hexadecimal).
* `\uXXXXXX` matches the character whose codepoint is `XXXXXX` (in hexadecimal).

== Character classes

The `[` character introduces a character class, matching one character
from a set of characters.

A character class contains a list of literals, character ranges,
and character class escapes surrounded by `[` and `]`.

If the first character inside a character class is `^`, then the character
class is negated, meaning that it matches every character not specified
in the character class.

Literals match themselves, including syntax characters, so `^`
does not need to be escaped in a character class. `[\*+]` matches both
the `\*` character and the `+` character. Literal escape sequences are
supported, so `[\n\r]` matches both the newline and carriage return
characters.

The `]` character needs to be escaped for it to match a literal `]`
instead of closing the character class.

Character ranges are written as `<start character>-<end character>`, so
`[A-Z]` matches all uppercase basic letters. `[A-Z0-9]` will match all
uppercase basic letters and all basic digits.

The `-` characters in a character class that are not specifying a
range are treated as literal `-`, so `[A-Z-+]` matches all upper case
characters, the `-` character, and the `+` character.

Supported character class escapes are:

* `\d` which matches digits 0-9.
* `\w` which matches word characters A-Z, a-z, 0-9 and underscore
    (ignoring the `extra_word_chars` option).
* `\s` which matches all Unicode whitespace characters.
* `\h` which matches whitespace except Vertical Tab and line-breaks.

Using an upper case letter instead of a lower case one will negate
the character class. For example, `\D` will match every non-digit
character.

Character class escapes can be used outside of a character class, `\d`
is equivalent to `[\d]`.

== Any character

`.` matches any character, including newlines, by default.
(see <<regex#modifiers,:doc regex modifiers>> on how to change it)

== Groups

Regex atoms can be grouped using `(` and `)` or `(?:` and `)`. If `(` is
used, the group will be a capturing group, which means the positions from
the subject strings that matched between `(` and `)` will be recorded.

Capture groups are numbered starting at 1. They are numbered in the
order of appearance of their `(` in the regex. A special capture group
0 is for the whole sequence that matched.

* `(?:` introduces a non capturing group, which will not record the
matching positions.

* `(?<name>` introduces a named capturing group, which, in addition to
being referred by number, can be, in certain contexts, referred by the
given name.

== Alternations

The `|` character introduces an alternation, which will either match
its left-hand side, or its right-hand side (preferring the left-hand side)

For example, `foo|bar` matches either `foo` or `bar`, `foo(bar|baz|qux)`
matches `foo` followed by either `bar`, `baz` or `qux`.

== Quantifier

Literals, character classes, any characters, and groups can be followed
by a quantifier, which specifies the number of times they can match.

* `?` matches zero, or one time.
* `*` matches zero or more times.
* `+` matches one or more times.
* `{n}` matches exactly `n` times.
* `{n,}` matches `n` or more times.
* `{n,m}` matches `n` to `m` times.
* `{,m}` matches zero to `m` times.

By default, quantifiers are *greedy*, which means they will prefer to
match more characters if possible. Suffixing a quantifier with `?` will
make it non-greedy, meaning it will prefer to match as few characters
as possible.

== Zero width assertions

Assertions do not consume any character, but they will prevent the regex
from matching if not fulfilled.

* `^` matches at the start of a line; that is, just after a newline
      character, or at the subject's beginning (unless it is specified
      that the subject's beginning is not a start of line).
* `$` matches at the end of a line; that is, just before a newline, or
      at the subject end (unless it is specified that the subject's end
      is not an end of line).
* `\b` matches at a word boundary; which is to say that between the
       previous character and the current character, one is a word
       character, and the other is not.
* `\B` matches at a non-word boundary; meaning, when both the previous
       character and the current character are word characters, or both
       are not.
* `\A` matches at the subject string's beginning.
* `\z` matches at the subject string's end.
* `\K` matches anything, and resets the start position of capture group
       0 to the current position.

More complex assertions can be expressed with lookarounds:

* `(?=...)` is a lookahead; it will match if its content matches the
            text following the current position.
* `(?!...)` is a negative lookahead; it will match if its content does
            not match the text following the current position.
* `(?<=...)` is a lookbehind; it will match if its content matches
             the text preceding the current position.
* `(?<!...)` is a negative lookbehind; it will match if its content does
             not match the text preceding the current position.

For performance reasons, lookaround contents must be a sequence of
literals, character classes, or any character (`.`); quantifiers are not
supported.

For example, `(?<!bar)(?=foo).` will match any character which is not
preceded by `bar` and where `foo` matches from the current position
(which means the character has to be an `f`).

== Modifiers

Some modifiers can control the matching behavior of the atoms following
them:

* `(?i)` starts case-insensitive matching.
* `(?I)` starts case-sensitive matching (default).
* `(?s)` allows `.` to match newlines (default).
* `(?S)` prevents `.` from matching newlines.

== Quoting

`\Q` will start a quoted sequence, where every character is treated as
a literal. That quoted sequence will continue until either the end of
the regex, or the appearance of `\E`.

For example, `.\Q.^$\E$` will match any character followed by the
literal string `.^$`, followed by an end of line.

== Compatibility

Kakoune's syntax tries to follow the ECMAScript regex syntax, as defined
by <https://www.ecma-international.org/ecma-262/8.0/>; some divergence
exists for ease of use, or performance reasons:

* Lookarounds are not arbitrary, but lookbehind is supported.
* `\K`, `\Q..\E`, `\A`, `\h` and `\z` are added.
* Stricter handling of escaping, as we introduce additional escapes;
  identity escapes like `\X` with `X` being a non-special character
  are not accepted, to avoid confusions between `\h` meaning literal
  `h` in ECMAScript, and horizontal blank in Kakoune.
* `\uXXXXXX` uses 6 digits to cover all of Unicode, instead of relying
  on ECMAScript UTF-16 surrogate pairs with 4 digits.

= Registers

== Description

Registers are named lists of text -instead of simply text- in order to interact
well with multiselection. They are used for various purposes, like storing
yanked text, the locations of selections in a buffer, or groups captured by a
regular expression.

== Interacting

*<c-r><c>*::
    when in insert mode or in a prompt, insert the value stored in the
    *c* register (single character)

*"<c>*::
    in normal mode, select the *<c>* register (single character)

== Alternate names

Non alphanumeric registers have an alternative name that can be used
in contexts where only alphanumeric identifiers are possible.

== Default registers

All normal-mode commands using a register default to a specific one if not specified:

*"* (dquote)::
    default delete / copy / paste / replace register, used by:
    *c*, *d*, *y*, *p*, *<a-p>*, *<P>*, *<a-P>*, *R* and *<a-R>*
    (see <<keys#changes, `:doc keys changes`>>)

*/* (slash)::
    default search / regex register, used by:
    */*, *<a-/>*, *?*, *<a-?>*, *n*, *<a-n>*, *N*, *<a-N>*, ***, *<a-***>*,
    *s*, *S*, *<a-k>* and *<a-K>*
    (see <<keys#searching, `:doc keys searching`>>).
    This is a prompt history register, holding the last 100 commands entered
    at an interactive regex prompt.

*@* (arobase)::
    default macro register, used by:
    *q* and *Q*
    (see <<keys#macros, `:doc keys macros`>>)

*^* (caret)::
    default mark register, used by:
    *z*, *<a-z>*, *Z* and *<a-Z>*
    (see <<keys#marks, `:doc keys marks`>>
    and <<registers#marks, `:doc registers marks`>>)

*|* (pipe)::
    default shell command register, used by commands that spawn a subshell:
    *|*, *<a-|>*, *!* and *<a-!>*
    (see <<keys#changes-through-external-programs, `:doc keys changes-through-external-programs`>>).
    This is a prompt history register, holding the last 100 commands entered
    at interactive shell command prompts, except for commands starting with
    a space.

== Special registers

Some registers are not general purposes, they cannot be written to, but they
contain some special data

*%* (percent)::
    current buffer name

*.* (dot)::
    current selection contents

*#* (hash)::
    selection indices (first selection has 1, second has 2, ...)

*_* (underscore)::
    null register, always empty

*:* (colon)::
    prompt history register holding the last 100 commands entered at the
    interactive prompt, except for commands starting with a space.

== Integer registers

Registers *1* to *9* hold the grouped sub-matches of the regular
expression used to make the last selection. Example: applying the
following regular expression to the date of the day would put the day of
the week in register *1*, the month in register *2*, and the day of the
month in register *3*, but select the entire date:

--------------------
(\w+) (\w+) (\d+) .+
--------------------

== Marks

When a register is used to store a set of selections with the *Z* key (see
<<keys#marks, `:doc keys marks`>>), the selections are stored as a list of
spans, in a format similar to `%val{selections_desc}` (see
<<expansions#value-expansions, `:doc expansions value-expansions`>>). However,
the very first item of the list is of the form:

------------------------------------------
<buffer name>@<timestamp>@<main sel index>
------------------------------------------

with:

*buffer name*::
    `%val{buffile}` of the buffer selections relate to

*timestamp*::
    `%val{timestamp}` at which the selection applies to

*main sel index*::
    0-based index of the main selection

= Scopes

== Description

Scopes are groups in which a particular Kakoune object can have different
values depending on the group the value was declared in.

These scoped objects are:

- aliases (See <<commands#,`:doc commands`>>)
- faces (See <<faces#,`:doc faces`>>)
- highlighters (See <<highlighters#,`:doc highlighters`>>)
- hooks (See <<hooks#,`:doc hooks`>>)
- keymaps (See <<mapping#,`:doc mapping`>>)
- options (See <<options#,`:doc options`>>)

== Names and hierarchy

Scopes are named as follows:

*window*::
    context linked to the window displaying a buffer.

    In Kakoune, the concept of a *window* must not be confused with
    the concept of a window at the OS level.
    In other terms, a window is *not* a client (like a terminal or GUI)
    but one of many 'views' into a buffer.

    There is a N:1 relationship between windows and buffers; once a 
    window is linked to a buffer, the window's buffer never changes.
    Windows store a set of selections and the scroll position.

*buffer*::
    context linked directly to the buffer

*global*::
    global context linked to the instance of Kakoune

The following order of priority applies to the above scopes:

--------------------------
window ]> buffer ]> global
--------------------------

The above priority line implies that objects can have individual values that
will be resolved first in the *window* scope (highest priority), then in
the *buffer* scope, and finally in the *global* scope (lowest priority).

Normally, the *buffer* scope keyword means the scope associated with the
currently active buffer, but it's possible to specify any existing buffer by
adding an `=` and the value of `%val{buffile}` for that buffer
(See <<expansions#value-expansions,`:doc expansions value-expansions`>>).
For example, to set the `indentwidth` option for the `/etc/fstab` buffer::

----
set-option buffer=/etc/fstab indentwidth 8
----

The `set-option` and `unset-option` commands also accept *current* as 
a valid scope name. It refers to the narrowest scope the option is set in.

== Uses

The scope paradigm is very useful as it allows the user to customize the
behavior of the editor without modifying the configuration globally, as
is the case with other editors who only have a single *global* scope by
default.

Examples:

*filetype*::
    A single buffer opened in two separate windows can have different
    filetypes declared in the *window* scope with 'set-option'.
    (See <<options#,`:doc options`>>)

*status line*::
    All the buffers of the current session can have the same information
    displayed in the status line, except for a specific buffer (the
    'modelinefmt' option can be declared in the *global* scope, and
    customized in the *buffer* scope with 'set-option'.
    (See <<options#,`:doc options`>>)

== Execution context

Some commands work in a specific context that might exclude one or
several scopes altogether, consequently ignoring some values of a given
object.

Example: the *window* scope is never considered when resolving the
values of options when writing a buffer (e.g. 'BOM', 'eolformat').

