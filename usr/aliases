#!/bin/bash
# alias
alias a='alias'

# convert utc to localtime: date -d '10:00:00 UTC'
extension() { [[ $1 =~ '\.' ]] && recho "${@##*.}" }
filebasename() { basename $1 | cut -f 1 -d '.' }
abs() { echo "$(cd "$(dirname "$1")" && pwd -P)/$(basename "$1")" }

# https://unix.stackexchange.com/questions/159253/decoding-url-encoding-percent-encoding
alias urlencode='python3 -c "import urllib.parse, sys; print(urllib.parse.quote(\" \".join(sys.argv[1:]) if len(sys.argv) > 1 else sys.stdin.read()[0:-1]))"'
alias urlencodeplus='python3 -c "import urllib.parse, sys; print(urllib.parse.quote_plus(\" \".join(sys.argv[1:]) if len(sys.argv) > 1 else sys.stdin.read()[0:-1]))"'
alias urlencodeslash='python3 -c "import urllib.parse, sys; print(urllib.parse.quote(  \" \".join(sys.argv[1:]) if len(sys.argv) > 1 else sys.stdin.read()[0:-1], \"\"))"'
alias urldecode='python3 -c "import urllib.parse, sys; print(urllib.parse.unquote(\" \".join(sys.argv[1:]) if len(sys.argv) > 1 else sys.stdin.read()[0:-1]))"'

# much needed null support that the ax shell would have builtin
shellescape() {
    printf '%q' "$(cat)"
}

nulls_clean() {
    sed -E 's/\x0+/\x0/g' | sed -E 's/\x0$|^\x0//g'
}

nulls_args() {
    # the "||" is needed for if there is text after the last '\0'.
    while read -rd $'\0' line || [ -n "$line" ]; do
        echo -n $(shellescape <<< "$line")$'\0'
    done | nulls_clean | tr '\0' ' '
}


# hex string to int:
# python -c 'import sys; print(int(sys.stdin.read(), 16))'

# diff -u f1 f2 | diff-so-fancy
# remove duplicates no sorting.
# awk '{ if (a[$0] == 0){ a[$0] += 1; print $0} else {print "NULL";}}'

# Get the fingerprint of an ssh private key (useful for aws).
# openssl pkcs8 -in <path_to_private_key> -inform PEM -outform DER -topk8 -nocrypt | openssl sha1 -c

# increment git tag
# git tag | sort -V | tail -n 1 | awk -vFS=. -vOFS=. '{$NF++;print}'

# Adding ogg meta-data
# vorbiscomment -w -t 'ARTIST=alan@xoc3.io' -t 'ALBUM=piano-tunes' -t 'TITLE=canon theme' canon_theme.ogg
# vorbiscomment canon_theme.ogg

# Show if airplane mode is on or off
# rfkill list all

# create midi connection:
# timidity -iA
# aconnect <send-midi> <receive-midi>

# create short github url
# curl -i https://git.io -F "url=<github-url>"

# cli_yt installation:
# pacman -S libcaca                       # needed for ascii video driver
# yay mpv-git                             # needed for yt-dlp default & libcaca built-in integration
# python3 -m pip install --upgrade yt-dlp # youtube-dl is too laggy now and not maintained as much

# waitexecquiet
waitexecq() {
    (&>/dev/null nohup bash -c "sleep $1; ${@:2}" &)
}

waitexec() {
    (bash -c "sleep $1; ${@:2}" &)
}

mpv_cli_mute() {
    [ "$#" -lt 1 ] && echo "USAGE: $0 <mpv-options>..." && return 1
    CACA_DRIVER=ncurses mpv --no-terminal --aid=no -vo caca "$@"
}

mpv_cli() {
    [ "$#" -lt 1 ] && echo "USAGE: $0 <mpv-options>..." && return 1
    CACA_DRIVER=ncurses mpv --no-terminal -vo caca "$@"
}

# cats files to a destination, then shreds & rms them.
mvcat() {
    cat "${@:1:${#@}-1}" >> "${@:${#@}}"
    command -v shred &>/dev/null && shred "${@:1:${#@}-1}"
    rm "${@:1:${#@}-1}"
}

# I don't want a python client, so here's my own tldr script.
tldr() {
    if [ ! -d "$HOME/repos/tldr" ]; then
        echo "tldr not installed, installing"
        mkdir -p "$HOME/repos"
        git clone "git@github.com:tldr-pages/tldr.git" "$HOME/repos/tldr"
    fi
    
    pushd "$HOME/repos/tldr/pages" >/dev/null 2>&1
    fd -0t f '^'"$1"'\.md$' 2>/dev/null | xargs -0 bat --paging never --style header-filename,grid -- 
    popd >/dev/null 2>&1
}

# cats files to stdout, then shreds & rms them.
rmcat() {
    cat "${@:1:${#@}}"
    command -v shred &>/dev/null && shred "${@:1:${#@}}"
    rm "${@:1:${#@}}"
}

multiqr() {
    [ "$#" -ne 2 ] && echo "USAGE: echo x | multiqr DIRNAME MAX_BYTES" && return 1
    tempdir=$(mktemp -d)
    pushd "$tempdir" > /dev/null
    cat > original_file
    char_count=$(cat original_file | wc -m)
    cat original_file | split -b $(calc_partition "$char_count" $2)
    rm original_file
    for file in $(ls); do
        cat $file | qrencode -o $file.png
        shred $file
        rm $file
    done
    popd > /dev/null
    mv "$tempdir" "$1"
}

# A poor vpn
a pvpn="sshuttle -r serv 0/0 -x xoc3.io"

check_dns_a_record() {
    dig +short $1
}

check_rdns() {
    dig -x $(check_dns_a_record $1) +short
}

# renaming user: https://linuxtechlab.com/rename-user-in-linux-rename-home-directory/
# pkill -u $old_username # (end running sessions)
# usermod -l $new_username $old_username
# usermod -d /home/$new_username -m $new_username
# groupmod -n $new_username $old_username

# https://www.jvt.me/posts/2019/12/04/openssl-certs-dir-setup/

# Returns the PEM-like certificate from https thing
# USAGE: domain port
get_ssl_cert() {
    openssl s_client -connect "$1:${2:-443}" 2>/dev/null </dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'
}

parse_ssl_cert() {
    openssl x509 -inform pem -noout -text
}

# gemini
a am='amfora'
ams() { amfora "gemini://geminispace.info/search?$(urlencode $@)" }
a ama='amfora warmedal.se/~antenna/'
a amx='amfora xoc3.io'

# host name then path
cgem() { echo "gemini://$1/$2" | ncat -C --ssl "$1" 1965 }

# qrdecode
qrdecode='zbarimg --raw -q'

# update files
a ua='unalias -a; source ~/.aliases 2> /dev/null; source ~/.local_aliases 2> /dev/null'
a uz='unalias -a; source ~/.zshenv 2> /dev/null;  source ~/.zshrc 2> /dev/null'

# mount
a mone="sudo mount /dev/sda1 /mnt"
a mountmicrosd=mountcard
a mountsdcard=mountcard
a mtwo="sudo mount /dev/sdb1 /mnt2"
a umnt='sudo umount /mnt'
a umone="sudo umount /mnt"
a umtwo="sudo umount /mnt2"

# git
# Interesting article: https://redfin.engineering/visualize-merge-history-with-git-log-graph-first-parent-and-no-merges-c6a9b5ff109c
# Interesting git log options from that article: git log --pretty="format:%h %ar %s" --no-merges --first-parent --graph

# use filter-repo to remove a file from history
# git filter-repo --path <absolute-path-of-file-from-base-dir> --invert-paths --force

repos() { cd ~/repos "$@" }
rep() { repos "$@" }
cg() { cd $(git rev-parse --show-toplevel) "$@" }
gs() { git status "$@" }
gst() { git stash "$@" }
g() { git "$@" }
gsi() { git submodule init "$@" }
gsu() { git submodule update "$@" }
gu() { git pull "$@" }
gf() { git fetch "$@" }
ga() { git add "$@" }
gaa() { git add --all "$@" }
gr() { git rebase "$@" }
gri() { git rebase -i "$@" }
gra() { git rebase --abort "$@" }
grc() { git rebase --continue "$@" }
gc() { git add --all; git commit --allow-empty-message -m ""; } # git savepoint
gcm() { git add --all; git commit; }
gca() { git add --all; git commit --amend; }
grh() { git reset --hard "$@" }
gcl() { git clone "$@" }
gm() { git merge "$@" }
gmf() { git merge --ff-only "$@" }
gp() { git push "$@" }
gpf() { git push --force "$@" }
gpn() { git push -u origin $(git branch --show-current) "$@" }
gpd() { git push origin --delete $(git branch --show-current) "$@" }
gl() { git log --format='%C(auto)%h%C(reset)%C(blue)% p%C(reset) : %ci : %C(green)%cl%C(reset) : %s' --color "$@" | ([[ -o interactive ]] && kak || cat) }
gll() { git log | ([[ -o interactive ]] && kak || cat) }
glf() { gl --name-status "$@" | sed '/^ *$/d' | ([[ -o interactive ]] && kak || cat) }
gd() { git diff "$@" | diff-so-fancy | kak }
gdc() { git diff --cached "$@" | diff-so-fancy | kak }
gdf() { git diff --cached --name-only "$@" }
gt() { git tag "$@" }
gb() { git branch "$@" }
gbd() { git branch -D "$@" }
gbdr() { git push origin --delete "$@" }
gba() { git branch --all "$@" }
gpa() { git push --all origin "$@" }
gbc() { git branch --show-current "$@" }
gk() { git checkout "$@" }
gk-() { git checkout - "$@" }
gkb() { git checkout -b "$@" }
gkt() { git checkout --track "$@" }
gbl() { git blame "$@" }
gwl() { git worktree list "$@" }
gwa() { git worktree add "$HOME/work/$1" "$@" }
gwr() { git worktree remove --force "$HOME/work/$1" "$@" }
a gitsvnignore='git svn show-ignore >> .git/info/exclude'

# one off github pr
ofpr() {
  local prefix='pr'
  if [ -n "$1" ]; then
    prefix="$1"
  fi

  local branch_name="$prefix-$(pwgen 5 -A -0 1)"
  git checkout -b "$branch_name"
  gcm
  ghpr
}

ghpr() {
  gpn; gh pr create -dt "$(gbc)" -b ''; gh pr view --web
}

# git list cases
# First parameter is where you are merging into.
# Second parameter is your feature branch. Optional if you are already checked out there.
glc() {
    git log $1..$2 --oneline | grep -io1 '\([A-Za-z]\+-\d\+\)' | sort -u | sed ':a; N; $!ba; s/\n/, /g'
}

# github
a ghi='gh issue'
a ghil='gh issue list'

randradio() {
  local RADIO=$(echo '/chiptune_/_/anon_/tilde_/kohina_/slay' | tr _ "\n" | shuf | head -n 1)
  mpv_category webradio 75 "https://radico8.xoc3.io$RADIO"
}

a chiptune='   mpv_category webradio/chiptune   75 http://79.120.11.40:8000/chiptune.ogg'
a radico8='    mpv_category webradio/radico8    75 http://radico8.xoc3.io'
a anonradio='  mpv_category webradio/anonradio  75 http://anonradio.net:8000/anonradio'
a tilderadio=' mpv_category webradio/tilderadio 75 https://azuracast.tilderadio.org/radio/8000/radio.ogg'
a kohinaradio='mpv_category webradio/tilderadio 75 http://kohina.duckdns.org:8000/stream.ogg'
a slayradio='  mpv_category webradio/tilderadio 75 https://www.slayradio.org/tune_in.php/128kbps/slayradio.128.m3u'

a book='mpv_category       book                75'

a getvid="youtube-dl -f 18"
a vid2mp3='youtube-dl --extract-audio --audio-format mp3'

# golang
a gocover='go test -coverprofile=/tmp/cover.out; go tool cover -html=/tmp/cover.out'

# vim & kak
a k="kak"
a editsnips="kak ~/.dot/snips/*"
a es='editsnips'
a ek='kak ~/.config/kak/kakrc'
a ea='kak ~/.aliases ~/.local_aliases'
a eb='kak ~/repos/capsule/cap/blog/$(date -u +%F).gmi'
a ez='kak ~/.zshrc ~/.zshenv ~/.dot/local_zshrc ~/.dot/zbindings'

# acpi
a acip=acpi
a piac=acpi
a paci=acpi
a ipca=acpi
a ipac=acpi
a paic=acpi
a pcai=acpi
a pcia=acpi
a pica=acpi
a aicp=acpi
a aipc=acpi
a apci=acpi
a apic=acpi
a iacp=acpi
a cpai=acpi
a cpia=acpi
a cpi=acpi
a ciap=acpi
a cipa=acpi
a caip=acpi
a capi=acpi
a iapc=acpi
a icap=acpi
a icpa=acpi
a acp=acpi
a ac=acpi

# docker
docid()   { docker ps | grep "$1" | cut -d ' ' -f1 }
docl()    { docker logs $(did $1) }
docsh()   { docker exec -it "$1" /bin/sh }
docbash() { docker exec -it "$1" /bin/bash }
doczsh()  { docker exec -it "$1" /bin/zsh }
a dka='docker kill $(docker container ls -q)' # Kill all running containers.
a dkl='docker kill $(docker ps | awk "{print \$1;}" | tail -n 1)' # Kill first container.
a dps='docker ps'
a db.='docker build .'

# gui
a i3l='i3lock -c 000000'
a 3il='i3l'
a sx=startx

# sdcv
a define=sdcv
a defin=sdcv
a defi=sdcv
a def=sdcv
a dic=sdcv
a dictionary=sdcv
a dict=sdcv

# cd
cd_print() {
    if cd $1 >/dev/null; then
        local FILE_COUNT=$(fd -u --exact-depth 1 -0 | xargs -0 argcount)
        if [[ -z $FILE_COUNT ]]; then FILE_COUNT=0; fi
        echo -e '\033[31;1;40m'$(pwd)' ('$FILE_COUNT' files)\033[0m'
        ls --color
    fi
}

a cdot='cd_print ~/.dot'
a cdow='cd_print ~/Downloads'
a cdai='cd_print ~/diary'
a cwor='cd_print ~/work'
a ccap='cd_print ~/repos/capsule/wip'
a cpic='cd_print ~/.lexaloffle/pico-8/carts'
a c='cd_print'
a c-='cd_print -'
a c~='cd;cd_print' # Example: `c~ .dot` will open '~/.dot'.
a c.='cd_print ..'

a edl='k ~/diary/devlog.md'
a ejr='k ~/diary/$(date "+%Y")_diary.md'
a esc='k ~/diary/schedule'
a ra='ranger'

# clear
a cl=clear

# xclip
a copycurrent='echo cd $(pwd) | xclip'
a copypath=copycurrent

# make
a ake=make
a maake=make
a kmake=make
a jake=make
a jmake=make
a maek=make
a mak=make
a mkae=make
a mkea=make
a amke=make

# exit
a xeit='exit'
a quit='exit'
a eitx='exit'
a eixt='exit'
a etix='exit'
a etxi='exit'
a exti='exit'
a xite='exit'
a xit='exit'
a ext='exit'
a xti='exit'

# sbri
sbri() { echo $(expr $1 \* 192) > /sys/class/backlight/intel_backlight/brightness }
a supbri="sbri 100"
a mid="sbri 50"
a dim="sbri 20"
a bri="sbri 80"
a morbri="sbri 90"
a mordim="sbri 10"
a supdim="sbri 1"

# ls
a ls='exa'
a l='ls'
a lst='exa --tree'
a lt='lst'
a lls='ls'
a lss='ls'
a sl='ls'
a la='ls -a'
a lsa='ls -a'
a ll='ls -l'
a l.='ls -d .*'
a lsla='ls -la'
a lla='ls -la'
a lsl='ls -l'
a sls='ls -l'
a ssl='ls -l'
a ls..="ls .."

# poweroff
a poweraff='poweroff'
a pwoeroff='poweroff'
a pworeoff='poweroff'
a powreoff='poweroff'
a oweroff='poweroff'

# w3m
a w3m='w3m -no-mouse'
ddg() {
    w3m ddg.gg?q=$(urlencodeplus "${@:-}")
}

# xrandr
a tolap="xrandr --output HDMI-1 --off --output eDP-1 --auto --mode 1366x768 --panning 1366x768"
a tomirror="xrandr --output HDMI-1 --mode 1366x768 --output eDP-1 --same-as HDMI-1"

# feh
a feh='feh --force-aliasing --scale-down --draw-filename'
a rndbkgd="feh --randomize --bg-fill ~/Pictures/photos/*"
a difbkgd="rndbkgd"

# zathura
a zath=zathura
a z=zathura

# systemctl
a renet='systemctl restart NetworkManager.service'
a printer='systemctl start org.cups.cupsd'
a nonet='systemctl stop NetworkManager.service'
a netman='systemctl start NetworkManager.service'
a noprinter='systemctl stop org.cups.cupsd'

# pico8
a picoman='k /opt/pico8/pico-8_manual.txt'
a p8tool='~/repos/picotool/p8tool'
a pico="pico8"

# rm
a rmrf="rm -rf"
a rmr="rm -r"
a rd="rmdir"

# pass
a pe='pass edit'

# synclient
a   mouse='riverctl list-inputs | rg pointer | rg -v keyd | xargs -I _ riverctl input _ events enabled'
a nomouse='riverctl list-inputs | rg pointer | rg -v keyd | xargs -I _ riverctl input _ events disabled'

# sudo
a psudo='sudo env "PATH=$PATH" '

# expand aliases
a sudo='sudo '
a unbuffer='unbuffer '
a ub='unbuffer'

# publish
a listchinesefonts='fc-list :lang=zh'
a markdowntopdf='pandoc --pdf-engine=xelatex -V CJKmainfont="Source Han Sans CN" -o' # outputfile then input file.
viewmarkdown() { md2html $1 | qutepipe }
a vm='viewmarkdown'
a qb='qutebrowser'

# xargs
a xargs='xargs '
a x='xargs '

trim() { awk '{gsub(/^\s+|\s+$/,"")}{print}' }

# My hacky way to make a video 2x speed.
# vidspeed <input-file> <output-file>
doublespeed() {
    mencoder -speed 2 -o ".tmp-$2" -oac pcm -ovc lavc "$1"
    ffmpeg -vn -i ".tmp-$2" ".tmp-old-$2.wav"
    sox ".tmp-old-$2.wav" ".tmp-$2.wav" pitch -1200
    mencoder -ovc copy -oac copy -audiofile ".tmp-$2.wav" ".tmp-$2" -o "$2"
    rm ".tmp-old-$2.wav" ".tmp-$2" ".tmp-$2.wav"
}

# pico8 workflow commands
a pc="pico-compile"
a pw="pico-watch"

# sq
# verify file came from source:     sq verify --signer-cert release-key.pgp --detached <file.sig> <file>
# check information in a file:      sq inspect <file>

encrypt-with-pass() { openssl enc -aes-256-cbc -pbkdf2 -salt -in $1 -out $2 }
decrypt-with-pass() { openssl enc -aes-256-cbc -pbkdf2 -d -in $1 -out $2 }

# gpg
# gpg, manage email:         gpg --edit-key X; adduid; list; uid X; trust; uid X; revuid; save
# gpg, create subkey:        gpg --edit-key X; addkey (4, 4096); save;
# gpg, change key pass:      gpg --edit-key X; passwd; save;
# gpg, extend key:           gpg --edit-key X; expire; save;
# transfer subkey w/ssh:     gpg --export-secret-subkeys X! | ssh X -C 'gpg --import' # exclamation mark forces subkey.
# gpg, list secret keys:     gpg --list-secret-keys # "#" means the secret key is not on the machine
# transfer all public w/ssh: gpg --armor --export X | ssh X -C 'gpg --import'
# import: gpg --import
# view info about key:       gpg --list-packets
# delete secret key:         gpg-connect-agent "delete_key X" "/bye"

gpg-send-private() {
    [ "$#" -ne 2 ] && echo "USAGE: $0 <gpg-key-hash> <ssh-profile>" && return 1
    (pass show gpg 2>/dev/null; gpg --export-secret-subkeys "$1!") | ssh "$2" gpg --import --pinentry-mode loopback --passphrase-fd 0
}

gpg-send-public() {
    [ "$#" -ne 2 ] && echo "USAGE: $0 <gpg-key-hash> <ssh-profile>" && return 1
    (pass show gpg 2>/dev/null; gpg --armor --export "$1") | ssh "$2" gpg --import --pinentry-mode loopback --passphrase-fd 0
}

a gpglk='gpg --list-keys --with-subkey-fingerprints --with-keygrip'
a gpglks='gpg --list-secret-keys --with-subkey-fingerprints --with-keygrip'
a gpgek='gpg --armor --export'
a gpgfgk='gpg --full-generate-key'

# rg
fnam() { local filename=$(basename -- $1); echo "${filename%.*}"; }
enam() { local filename=$(basename -- $1); echo $([[ "$filename" = *.* ]] && echo ".${filename##*.}" || echo ''); }

a rgl='rg -l'
a rgc='rg --color always'
rr() { rg "$1" "${@:3}" -l | xargs sed -Ei "s^$1^$2^g" }
rgf() { rg "$1"; fd -t f -s "$1" }

# Mv a file local to its directory.
rmv() { mv "$1" "$(dirname $1)/$2" }
rcp() { cp $1 "$(dirname $1)/$2" } # Cp a file local to its directory.
sw() { tf=$(mktemp $(dirname "$1")/XXXXXX) && mv "$1" "$tf" && mv "$2" "$1" &&  mv "$tf" "$2" }

# Networking Notes
# find which domain names are used for an IP with "nslookup"

# human readable flags
a free='free -h'
a du='du -h'
a df='df -h'
a zip='zip -j'

# random
ssht() { ssh $1 -t 'tmux attach 2> /dev/null || tmux 2> /dev/null || zsh 2> /dev/null || bash 2> /dev/null' "${@:2}" }
ttt() { [[ -n $1 ]] && while sleep 1s; do (ttrack rec "$1" 2s &); done || echo 'Requires argument for group' }

a wh=which
a termdown='termdown -a --font 3x5'
a tt='ttrack'
a bat='bat -p --paging never'
a b='bat'
a u='echo -e "$(whoami)@$(cat /etc/hostname)"'
a bn='basename'
a p='pwd'
a wai=whoami
a lam='lookatme --live -e terminal'
a pipu='pip install --user --break-system-packages'
a bc='bc -q'

j2y() {
  yq e '.[] | split_doc' -P
}

# this claims 64k to be a good block size for modern hardware. Arch docs say 1m is fine though:
# https://superuser.com/questions/234199/good-block-size-for-disk-cloning-with-diskdump-dd
a dd='dd bs=1M status=progress'

# uses pico-8 pallette :)
a lock='waylock --init-color 0x000000 --input-color 0x5f574f --fail-color 0xff004d'

a ta='tmux attach'
a watch='watch -c -d'
a daet='date'
a slblk='lsblk'
a repin='repelify pinyin'

# himalaya archive inbox
emailarchive() {
    last=$(himalaya -a "$1" -o json list -s 1 | jq -r '.response[].id')
    [[ -n $last ]] && himalaya -a "$1" move "1:$last" "$2"
}

a garch='emailarchive gmail "[Gmail]/All Mail"'
a xarch='emailarchive xoc3  All'

# Turns any command into a repl!
repelify() {
    if [[ -z $1 ]]; then echo 'No command provided'; return; fi
    printf '-> '
    while read -r line; do
        cat <<< "$line" | $*
        printf '-> '
    done
}

printnotnil() { [[ -n "${@:2}" ]] && cat <<< ${1/\%\%/${@:2}} }

fzf_menu_m() { fzf --height 100% --reverse --no-mouse --cycle --print0 -m "$@" | nulls_clean | nulls_args }
fzf_menu_s() { fzf --height 100% --reverse --no-mouse --cycle --print0    "$@" | nulls_clean }

# return 1 means fzf was exited
# return 2 means the command should be executed
fzf_modes() {
    local fzfcommand="${1:-$(fzflist_echomodes | fzf_menu_s --bind space:accept)}"
    [ -z "$fzfcommand" ] && return 1

    local fzfoptions=fzf_menu_m
    if typeset -f fzfcomm_"$fzfcommand" > /dev/null; then
        fzfoptions=$(fzfcomm_"$fzfcommand")
    fi

    local fzfoutput=$(fzflist_"$fzfcommand" | eval "$fzfoptions")
    [ -z "$fzfoutput" ] && return 1

    if typeset -f fzffilt_"$fzfcommand" > /dev/null; then
        fzffilt_"$fzfcommand" <<< "$fzfoutput"
    else
        cat <<< "$fzfoutput"
    fi

    if typeset -f fzfexec_"$fzfcommand" > /dev/null; then
        return 2
    fi
}

# awk is used instead of 2 fd commands to cut the time in about half
fd_sane_order() {
    (for i in $(seq 1 4); do fd --exact-depth $i -u "$@"; done; fd --min-depth 5 -u "$@") | awk '!/^\.|\/\./ {print $0;} /^\.|\/\./ {arr[arrlen++] = $0;} END {for (i=0; i<arrlen; i++) print arr[i];}'
}

# these functions list things
fzflist_dirs()       { fd_sane_order -t d }
fzflist_files()      { fd_sane_order -t f -t l }
fzflist_gitbranch()  { git for-each-ref --format='%(refname:short)' refs/remotes refs/heads }
fzflist_gitrefs()    { git for-each-ref --format='%(refname:short)' }
fzflist_gittag()     { git for-each-ref --format='%(refname:short)' refs/tags }
fzflist_ssh()        { sed -rn 's/^\s*Host\s+(.*)$/\1/ip' ~/.ssh/config ~/.ssh/local_ssh 2> /dev/null | xargs -n1 }
fzflist_ttrack()     { ttrack ls -r }
fzflist_man()        { apropos "." 2> /dev/null | awk '{print $1;}' | uniq }
fzflist_himaccount() { cat ~/.config/himalaya/config.toml | rg '^\[(.+)\]$' -r '$1' }
fzflist_tldr()       { fd '.*\.md' "$HOME/repos/tldr/pages" -t f | awk -F / '{sub(/\.md$/, ""); print $NF}' }
fzflist_echomodes()  { print -l ${(ok)functions} | rg '^fzflist_' | sed -E 's/fzflist_//g' }
fzflist_evalmodes()  { print -l ${(ok)functions} | rg '^fzfeval_' | sed -E 's/fzfeval_//g' }

fzflist_capsule()    { fd . ~/repos/capsule/cap/blog | sort -rn }

# hacky way to just get a command from the history.
# it's suprising this isn't supported by default...
fcedit() { cat "$@"; return 1 } # return 1 tells fc not to execute the command.

fzflist_history() { fc -rl 1 }
fzfcomm_history() { echo fzf_menu_s --tiebreak index --with-nth 2.. }
fzffilt_history() { FCEDIT=fcedit fc $(awk '{print $1}') }

fzflist_pass() { pa list }
fzfcomm_pass() { echo fzf_menu_s }

fzflist_passclip() { fzflist_pass }
fzfcomm_passclip() { fzfcomm_pass }
fzffilt_passclip() { pa show $(cat) | perl -pe "chomp if eof" | ccl >/dev/null; waitexecq 10s ccl }

fzflist_cd() { fzflist_dirs }
fzfcomm_cd() { echo fzf_menu_s }
fzffilt_cd() {
  local dir="$(printf '%q' "$(cat)")"
  echo 'cd '"$dir"' && pwd'
}
fzfexec_cd() {}

fzflist_exec() { echo "$PATH" | tr : '\0' | xargs -0 fd . --exact-depth 1 2>/dev/null | sed -E 's,.+/,,g' | sort -u }
fzfcomm_exec() { echo fzf_menu_s }
fzffilt_exec() { echo "$(cat)" }
fzfexec_exec() {}

transfer(){ if [ $# -eq 0 ];then echo "No arguments specified.\nUsage:\n transfer <file|directory>\n ... | transfer <file_name>">&2;return 1;fi;if tty -s;then file="$1";file_name=$(basename "$file");if [ ! -e "$file" ];then echo "$file: No such file or directory">&2;return 1;fi;if [ -d "$file" ];then file_name="$file_name.zip" ,;(cd "$file"&&zip -r -q - .)|curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name"|tee /dev/null,;else cat "$file"|curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name"|tee /dev/null;fi;else file_name=$1;curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name"|tee /dev/null;fi;}

gcroles() { # lets me see roles in gcloud
  gcloud projects get-iam-policy "$1"  \
  --flatten="bindings[].members" \
  --format='table(bindings.role)' \
  --filter="bindings.members:$2"
}

gcrolesadd() {
  gcloud projects add-iam-policy-binding $1 \
  --member="serviceAccount:$2" \
  --role="$3"
}

pg_perms() { # Given a role/user, figure out all permissions and print it. SQL INJECTION is possible here :) I luv it.
  echo -------------- TABLE --------------
  psql "$(pa s postgres-cdi-alan)" << "SELECT * FROM information_schema.role_table_grants WHERE grantee = '$1';"

  echo -------------- OWNER --------------
  psql "$(pa s postgres-cdi-alan)" << "SELECT * FROM pg_tables WHERE tableowner = '$1';"

  echo -------------- OWNER --------------
  psql "$(pa s postgres-cdi-alan)" << "SELECT r.usename AS grantor, e.usename AS grantee, nspname, privilege_type, is_grantable FROM pg_namespace JOIN LATERAL (SELECT * FROM aclexplode(nspacl) AS x) a ON true JOIN pg_user e ON a.grantee = e.usesysid JOIN pg_user r ON a.grantor = r.usesysid  WHERE e.usename = '$1';"
}

# If a command was run recently, just cat the cache file. If not recent, run the command.
# Duration defaults to days, but can have other time endings too: smhdw
# cachemd DURATION CMD ARGS...

# # Proof of concept for carg with ax shell.
# a carg ^EOF
#     $CACHE_DIR [!if (test -n {CACHECMD_DIR}) {CACHCMD_DIR} [!if (test -n {XDG_CACHE_HOME}) {XDG_CACHE_HOME} -/tmp]]/carg
#     $CACHE_DIR [or {CACHECMD_DIR} {XDG_CACHE_HOME} /tmp]/carg
#     $DURATION {1}
#     $FILE {CACHE_DIR}/(argshash *[range '2:' *{@}])
# 
#     !if (!and (find {FILE} -mtime -{DURATION} 2>/dev/null) (test -z {CACHECMD_CLEAR}))
#         [
#             (!if (test -n {CACHECMD_DEBUG}) [echo '[carg] cache mode'])
#             cat -- {FILE}
#         ][
#             (!if (test -n {CACHECMD_DEBUG}) [echo '[carg] command mode'])
#             mkdir -p {CACHE_DIR}
#             [range '2:' *{@}] | tee {FILE}
#         ];
# EOF
