#!/bin/bash
# This script installs the systemd files on a server.
# This should be run in the current directory.

TARGET_DIR=/srv/gemini
TARGET_USER=gemini

if [ "${EUID:-$(id -u)}" -ne 0 ]; then
    echo "Rerun this script as root! Exiting with non-zero error code."
    exit 1
fi

echo "Checking docker installation for gemini server, nginx for https server, rsync, & go for gemini proxy..."
pacman --needed -Sy docker certbot-nginx nginx-mainline go rsync
echo

echo "Ensuring that docker and nginx are both running running..."
systemctl enable docker.service
systemctl start docker.service

systemctl enable nginx.service
systemctl start nginx.service
echo

# This block has an "rm" before "cp", because binaries cannot be overwritten while executing, but they can be removed.
echo "Installing kineto..."
if [[ ! -d ${HOME}/repos/kineto ]]; then
    git clone 'https://github.com/alanxoc3/kineto.git' ${HOME}/repos/kineto
fi
pushd ${HOME}/repos/kineto
git fetch
git merge
go build .
rm -f /usr/bin/kineto
cp kineto /usr/bin/kineto
chmod ga+rx /usr/bin/kineto
popd
echo

# Print info.
echo "This is the current directory: '${PWD}'."
echo "This is the install location: '${TARGET_DIR}'."
echo "This is the user/group to use: '${TARGET_USER}:${TARGET_USER}'."
echo

echo "Creating the ${TARGET_USER} user..."
useradd -m -d ${TARGET_DIR} ${TARGET_USER}
echo

echo "Copying server scripts to ${TARGET_DIR}/server..."
mkdir -p ${TARGET_DIR}/server
cp ./gemini_server ./http_server ${TARGET_DIR}/server
echo

if [[ ! -d ${TARGET_DIR}/capsule ]]; then
    echo "Cloning the capsule..."
    git clone 'https://github.com/alanxoc3/capsule.git' ${TARGET_DIR}/capsule
    echo
fi

echo "Restricting permissions for ${TARGET_USER} user..."
chown -R ${TARGET_USER}:${TARGET_USER} ${TARGET_DIR}

mkdir -p ${TARGET_DIR}/capsule/.certificates
chmod 700 ${TARGET_DIR}/capsule/.certificates
chown -R root:root ${TARGET_DIR}/capsule/.certificates

chmod -R go-rwx ${TARGET_DIR}
echo

echo "Installing systemd scripts..."
pushd /etc/systemd/system/

cat << EOF | tee gemini-server.service > /dev/null
[Unit]
Description=The Gemini Server for my blog.

[Service]
ExecStart=${TARGET_DIR}/server/gemini_server ${TARGET_DIR}/capsule
WorkingDirectory=${TARGET_DIR}

[Install]
WantedBy=multi-user.target
EOF

cat << EOF | tee gemini-proxy.service > /dev/null
[Unit]
Description=The Gemini to Http proxy for my blog. Nginx calls this.

[Service]
ExecStart=${TARGET_DIR}/server/http_server

[Install]
WantedBy=multi-user.target
EOF

cat << EOF | tee gemini-git-pull.service > /dev/null
[Unit]
Description=Updates the folder for git. Meant to be called by a timer.

[Service]
ExecStartPre=git fetch
ExecStart=git merge
ExecStartPost=${TARGET_DIR}/capsule/compile
WorkingDirectory=${TARGET_DIR}/capsule
User=${TARGET_USER}
Group=${TARGET_USER}

[Install]
WantedBy=multi-user.target
EOF

cat << EOF | tee gemini-git-pull.timer > /dev/null
[Unit]
Description=Update git repo 4 times an hour.

[Timer]
OnCalendar=*:0/15
AccuracySec=1m
Persistent=true

[Install]
WantedBy=timers.target
EOF

popd
echo

echo "Reloading & restarting gemini systemctl..."
systemctl daemon-reload
systemctl enable gemini-server.service
systemctl enable gemini-proxy.service
systemctl enable gemini-git-pull.timer
systemctl restart gemini-server.service
systemctl restart gemini-proxy.service
systemctl restart gemini-git-pull.timer
echo

echo "Copying and reloading nginx config..."
cp ./nginx.conf /etc/nginx/nginx.conf
nginx -s reload
echo

# To setup certificates new, use this command:
# certbot --nginx

# If migrating certificates from an existing place, use these command on one computer:
# cd /etc/letsencrypt; sudo tar -cvf /root/letsencrypt.tar ./
# sudo scp /root/letsencrypt.tar alanxoc3@server:/home/alanxoc3
# sudo rm /root/letsencrypt.tar

# And on the other computer:
# cd /etc/letsencrypt; sudo tar --same-owner -xvf /home/alanxoc3/letsencrypt.tar
