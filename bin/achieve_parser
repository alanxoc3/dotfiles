#!/usr/bin/env python3
import os, sys, re, argparse
from calendar import monthrange
from datetime import datetime, date
parser = argparse.ArgumentParser()

now = datetime.now()
numOfDaysInCurrentMonth = monthrange(now.year, now.month)[1]
firstDayOfMonth = date(now.year, now.month, 1)
lastDayOfMonth = date(now.year, now.month, numOfDaysInCurrentMonth)

parser.add_argument("--begin-date", default=firstDayOfMonth.strftime('%Y-%m-%d'))
parser.add_argument("--end-date"  , default=lastDayOfMonth.strftime('%Y-%m-%d'))
parser.add_argument('file', type=argparse.FileType('r'), nargs='*')
args = parser.parse_args()

begin_date = list(map(int, args.begin_date.split('-')))
begin_date = date(begin_date[0], begin_date[1], begin_date[2])
end_date = list(map(int, args.end_date.split('-')))
end_date = date(end_date[0], end_date[1], end_date[2])

achieve_map = {}

p = re.compile(r'^- (--|\d\d):(--|\d\d) (\d\d\d\d)-(\d\d)-(\d\d) (\w+) -.*$')
for f in args.file:
    for line in f:
        m = p.match(line)
        if m is not None:
            year = int(m.group(3))
            month = int(m.group(4))
            day = int(m.group(5))
            day = 1 if day == 0 else day
            line_date = date(year, month, day)
            if line_date >= begin_date and line_date <= end_date:
                group = m.group(6)
                hours = m.group(1)
                minutes = m.group(2)
                hours = 0 if hours == '--' else int(hours)
                minutes = 0 if minutes == '--' else int(minutes)

                if group not in achieve_map:
                    achieve_map[group] = 0

                achieve_map[group] += hours*60 + minutes

for key in sorted(achieve_map.keys()):
    print(key, achieve_map[key]/60)

