#!/bin/bash

# Created by alanxoc3 (Alan Morgan) around 2023-06-25 for personal use.

# Basically, this will cache the output of a command for a given amount of time.
# So the command will sometimes run and sometimes not run.
# To force the command to run, set the environment variable "CARG_CLEAR" to any value.

# Duration is in days. That's what the -mtime argument for the find command uses.
# If duration is ".", then that means infinity. So always cache.
# cachemd DURATION CMD ARGS...

[ "$#" -lt 2 ] && echo 'USAGE: carg <duration> <cmd> [<arg>...]'

if [[ -z "$CARG_ENABLE" ]]; then
  # This command just runs the command if the user doesn't have caching enabled, which is the default.
  # The command's exit code is returned as well. When cache is enabled however, currently the exit code is always true.
  "${@:2}"
  exit "$?"
else
  CACHE_DIR=${CARG_DIR:-${XDG_CACHE_HOME:-/tmp}}/carg
  DURATION=$1
  FILE=${CACHE_DIR}/$(argshash "${@:2}")

  if [[ "$DURATION" = '.' ]]; then
    find $FILE &>/dev/null
  else
    find $FILE -mtime -${DURATION} &>/dev/null
  fi

  HAS_CACHE="$?"

  if [[ "$HAS_CACHE" = 0 ]] && [[ -z "$CARG_CLEAR" ]]; then
      [[ -n "$CARG_DEBUG" ]] && echo '[carg] cache mode' >&2
      cat < "$FILE"
  else
      [[ -n "$CARG_DEBUG" ]] && echo '[carg] command mode' >&2
      mkdir -p "$CACHE_DIR"
      "${@:2}" | tee "$FILE"
  fi
fi
