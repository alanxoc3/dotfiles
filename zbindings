#!/usr/bin/zsh
if zmodload zsh/parameter 2>/dev/null && (( ${+options} )); then
  __fzf_key_bindings_options="options=(${(j: :)${(kv)options[@]}})"
else
  () {
    __fzf_key_bindings_options="setopt"
    local __fzf_opt
    for __fzf_opt in "${(@)${(@f)$(set -o)}%% *}"; do
      if [[ -o "$__fzf_opt" ]]; then
        __fzf_key_bindings_options+=" -o $__fzf_opt"
      else
        __fzf_key_bindings_options+=" +o $__fzf_opt"
      fi
    done
  }
fi

emulate zsh -o no_aliases

eval $__fzf_key_bindings_options
unset __fzf_key_bindings_options

[[ -o interactive ]] || return 0

# backspace stops at some extra characters
backward-kill-dir() {
    local WORDCHARS=${WORDCHARS/\//|}
    zle backward-kill-word
    zle -f kill
}

zshbind '^[^?' backward-kill-dir

# clean way to do zsh binding stuff
zshbind() {
    local func_name=$(echo zshbind_"${@:2}" | tr ' ' '_')
    eval "$func_name"'() { '"${*:2}"' }'
    zle     -N   "$func_name"
    bindkey "$1" "$func_name"
}

fzf_zsh() {
    LBUFFER="$LBUFFER"$(fzf_modes "$@")
    local ret=$?
    zle reset-prompt
    # only accept the buffer if the return code was 2
    [[ "$ret" -eq "2" ]] && [[ -n "$BUFFER" ]] && zle accept-line
    return $ret
}

# echo modes
zshbind '^ '  fzf_zsh
zshbind '^t'  fzf_zsh files
zshbind '^r'  fzf_zsh history
zshbind '\ec' fzf_zsh cd
