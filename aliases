#!/bin/bash
# alias
alias a='alias'

extension() { [[ $1 =~ '\.' ]] && recho "${@##*.}" }
filebasename() { basename $1 | cut -f 1 -d '.' }
abs() { echo "$(cd "$(dirname "$1")" && pwd -P)/$(basename "$1")" }

# https://unix.stackexchange.com/questions/159253/decoding-url-encoding-percent-encoding
alias urlencode='python3 -c "import urllib.parse, sys; print(urllib.parse.quote(\" \".join(sys.argv[1:]) if len(sys.argv) > 1 else sys.stdin.read()[0:-1]))"'
alias urlencodeplus='python3 -c "import urllib.parse, sys; print(urllib.parse.quote_plus(\" \".join(sys.argv[1:]) if len(sys.argv) > 1 else sys.stdin.read()[0:-1]))"'
alias urlencodeslash='python3 -c "import urllib.parse, sys; print(urllib.parse.quote(  \" \".join(sys.argv[1:]) if len(sys.argv) > 1 else sys.stdin.read()[0:-1], \"\"))"'
alias urldecode='python3 -c "import urllib.parse, sys; print(urllib.parse.unquote(\" \".join(sys.argv[1:]) if len(sys.argv) > 1 else sys.stdin.read()[0:-1]))"'

# Installation:
# pacman -S libcaca                       # needed for ascii video driver
# yay mpv-git                             # needed for yt-dlp default & libcaca built-in integration
# python3 -m pip install --upgrade yt-dlp # youtube-dl is too laggy now and not maintained as much
cli_yt() {
    if [ "$#" -ne 1 ]; then
       echo "Usage: $0 <youtube-url>"
       return 1;
    fi
    CACA_DRIVER=ncurses mpv --no-terminal --aid=no -vo caca "$1"
}

mvcat() {
    cat "${@:1:${#@}-1}" >> "${@:${#@}}"
    rm "${@:1:${#@}-1}"
}

multiqr() {
    if [ "$#" -ne 2 ]; then
       echo "Usage: echo x | multiqr DIRNAME MAX_BYTES"
       return 1;
    fi

    tempdir=$(mktemp -d)
    pushd "$tempdir" > /dev/null
    cat > original_file
    char_count=$(cat original_file | wc -m)
    cat original_file | split -b $(calc_partition "$char_count" $2)
    rm original_file
    for file in $(ls); do
        cat $file | qrencode -o $file.png
        shred $file
        rm $file
    done
    popd > /dev/null
    mv "$tempdir" "$1"
}

check_dns_a_record() {
    dig +short $1
}

check_rdns() {
    dig -x $(check_dns_a_record $1) +short
}

# renaming user: https://linuxtechlab.com/rename-user-in-linux-rename-home-directory/
# pkill -u $old_username # (end running sessions)
# usermod -l $new_username $old_username
# usermod -d /home/$new_username -m $new_username
# groupmod -n $new_username $old_username

# openssl
# How to get a certificate
# openssl s_client -connect www.google.com:443 2>/dev/null </dev/null |  sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'

# https://www.jvt.me/posts/2019/12/04/openssl-certs-dir-setup/

# Usage: domain port
get_ssl_cert() {
    openssl s_client -connect "$1:$2" 2>/dev/null </dev/null |  sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'
}

# gemini
a am='amfora'
ams() { amfora "gemini://geminispace.info/search?$(urlencode $@)" }
a ama='amfora xoc3.io'

# qrdecode
qrdecode='zbarimg --raw -q'

# update files
a ua='unalias -a; source ~/.aliases 2> /dev/null; source ~/.local_aliases 2> /dev/null'
a uz='unalias -a; source ~/.zshenv 2> /dev/null;  source ~/.zshrc 2> /dev/null'

# mount
a mone="sudo mount /dev/sda1 /mnt"
a mountmicrosd=mountcard
a mountsdcard=mountcard
a mtwo="sudo mount /dev/sdb1 /mnt2"
a umnt='sudo umount /mnt'
a umone="sudo umount /mnt"
a umtwo="sudo umount /mnt2"

# git
# Interesting article: https://redfin.engineering/visualize-merge-history-with-git-log-graph-first-parent-and-no-merges-c6a9b5ff109c
# Interesting git log options from that article: git log --pretty="format:%h %ar %s" --no-merges --first-parent --graph
a repos='cd ~/repos'
a rep=repos
a cg='cd $(git rev-parse --show-toplevel)'
a gs='git status'
a gst='git stash'
a g='git'
a gsi='git submodule init'
a gsu='git submodule update'
a gu='git pull'
a gf='git fetch'
a ga='git add'
a gaa='git add --all'
a gr='git rebase'
a gra='git rebase --abort'
a grc='git rebase --continue'
a gc='git add --all; git commit;'
a gca='git add --all; git commit --amend;'
a grh='git reset --hard'
a gcl='git clone'
a gm='git merge'
a gmf='git merge --ff-only'
a gp='git push'
a gpf='git push --force'
a gpn='git push -u origin $(git branch --show-current)'
a gpd='git push origin --delete $(git branch --show-current)'
a gl='git log --show-signature'
a glo="gl --pretty='%h %ad %an: %s%d' --date=short"
a gla="glo --all --graph"
a glf="gl --name-status --find-renames --oneline"
a gd='git diff'
a gdc='git diff --cached'
a gdf='git diff --name-only'
a gt='git tag'
a gb='git branch'
a gbd='git branch -D'
a gbdr='git push origin --delete'
a gba='git branch --all'
a gpa='git push --all origin'
a gbc='git branch --show-current'
a gk='git checkout'
a gk-='git checkout -'
a gkb='git checkout -b'
a gkt='git checkout --track'
a gbl='git blame'
a gwl='git worktree list'
gwa() { git worktree add "$HOME/work/$1" }
gwr() { git worktree remove --force "$HOME/work/$1" }
a gitsvnignore='git svn show-ignore >> .git/info/exclude'

# git list cases
# First parameter is where you are merging into.
# Second parameter is your feature branch. Optional if you are already checked out there.
glc() {
    git log $1..$2 --oneline | grep -io1 '\([A-Za-z]\+-\d\+\)' | sort -u | sed ':a; N; $!ba; s/\n/, /g'
}

# github
a ghi='gh issue'
a ghil='gh issue list'

# mpsyt & youtube-dl
mpv_category() {
    local filename=$(mktemp)
    mv $filename $filename.lua
    filename=$filename.lua
    echo 'mp.add_periodic_timer(1, function() if "no" == mp.get_property("core-idle") then os.execute("ttrack rec '"$1"' 3s") end end)' > $filename
    mpv --script=$filename "${@:2}"
}

a chiptune='mpv_category webradio/chiptune http://79.120.11.40:8000/chiptune.ogg'
a anonradio='mpv_category webradio/anonradio http://anonradio.net:8000/anonradio'
a tilderadio='mpv_category webradio/tilderadio https://azuracast.tilderadio.org/radio/8000/radio.ogg'
a book='mpv_category book'
a anonsched="curl https://anonradio.net/schedule/ 2> /dev/null | k -f 'spre>|^$<ret><a-x>d'"

a getvid="youtube-dl -f 18"
a vid2mp3='youtube-dl --extract-audio --audio-format mp3'

# golang
a gocover='go test -coverprofile=/tmp/cover.out; go tool cover -html=/tmp/cover.out'

# vim & kak
a vor='kak ~/sync/library/dicts/esperanto_dictionary.txt'
a vim='nvim'
a vi='nvim'
a v='nvim'
a k="kak"
a editsnips="kak ~/.dotfiles/snips/*"
a es='editsnips'
a ev='kak ~/.config/nvim/lua/init.lua'
a ek='kak ~/.config/kak/kakrc'
a ea='kak ~/.aliases ~/.local_aliases'
a eb='kak ~/repos/capsule/cap/blog/$(date -u +%F).gmi'
a ez='kak ~/.zshrc ~/.zshenv ~/.dotfiles/local_zshrc'

# diary
a diary='cd ~/sync/alan/diary'
a di='diary'
a jrn='kak ~/sync/alan/diary/{2021_diary,motive,achievements,todos,plans}.md'
a rnj='jrn'
a nrj='jrn'
a njr='jrn'
a tl='jrn'
a rjn='jrn'
a jnr='jrn'

# acpi
a acip=acpi
a piac=acpi
a paci=acpi
a ipca=acpi
a ipac=acpi
a paic=acpi
a pcai=acpi
a pcia=acpi
a pica=acpi
a aicp=acpi
a aipc=acpi
a apci=acpi
a apic=acpi
a iacp=acpi
a cpai=acpi
a cpia=acpi
a cpi=acpi
a ciap=acpi
a cipa=acpi
a caip=acpi
a capi=acpi
a iapc=acpi
a icap=acpi
a icpa=acpi
a acp=acpi
a ac=acpi

# docker
did() { docker ps | grep "$1" | cut -d ' ' -f1 }
dl() { docker logs $(did $1) }
dsh() { docker exec -it "$1" /bin/sh }
dbash() { docker exec -it "$1" /bin/bash }
dzsh() { docker exec -it "$1" /bin/zsh }
a dka='docker kill $(docker container ls -q)' # Kill all running containers.
a dkl='docker kill $(docker ps | awk "{print \$1;}" | tail -n 1)' # Kill first container.
a dps='docker ps'
a db.='docker build .'

# gui
a i3l='i3lock -c 000000'
a 3il='i3l'
a sx=startx

# sdcv
a define=sdcv
a defin=sdcv
a defi=sdcv
a def=sdcv
a dic=sdcv
a dictionary=sdcv
a dict=sdcv

# cd
a dot='cd ~/.dotfiles'
a sdcard='cd /sdcard; ls;'
a down='cd ~/Downloads; ls'
a drop='cd ~/Dropbox; ls'
a cdpico="cd ~/.lexaloffle/pico-8/carts"
a cv="cd ~/.config/nvim"
a c='cd'
a c-='cd -'
a c~='cd;cd' # Example: `c~ .dotfiles` will open '~/.dotfiles'.
a c.='cd ..'
a sand='cd ~/repos/sand'

# dropbox
a rapiddrop="while [ true ]; do clear; dropstat; sleep 1; done"
a redrop='pkill dropbox; echo dropbox | bash - &'
a dropfile="dropbox-cli sharelink"
a dropls='dropbox-cli ls'
a dropstat='dropbox-cli status'

# clear
a cl=clear

# xclip
a copycurrent='echo cd $(pwd) | xclip'
a copypath=copycurrent

# make
a ake=make
a maake=make
a kmake=make
a jake=make
a jmake=make
a maek=make
a mak=make
a mkae=make
a mkea=make
a amke=make

# exit
a xeit='exit'
a quit='exit'
a eitx='exit'
a eixt='exit'
a etix='exit'
a etxi='exit'
a exti='exit'
a xite='exit'
a xit='exit'
a ext='exit'
a xti='exit'

# sbri
sbri() { echo $(expr $1 \* 192) > /sys/class/backlight/intel_backlight/brightness }
a supbri="sbri 100"
a mid="sbri 50"
a dim="sbri 20"
a bri="sbri 80"
a morbri="sbri 90"
a mordim="sbri 10"
a supdim="sbri 1"

# localectl & setxkbmap
a cdv='localectl set-keymap --no-convert dvorak'
a cqw='localectl set-keymap --no-convert us'
a gdv='setxkbmap -layout "us" -variant "dvorak"'
a gqw='setxkbmap -layout "us"'

# ls
a ls='exa'
a l='ls'
a lst='exa --tree'
a lt='lst'
a lls='ls'
a lss='ls'
a sl='ls'
a la='ls -a'
a lsa='ls -a'
a ll='ls -l'
a l.='ls -d .*'
a lsla='ls -la'
a lla='ls -la'
a lsl='ls -l'
a sls='ls -l'
a ssl='ls -l'
a ls..="ls .."

# poweroff
a poweraff='poweroff'
a pwoeroff='poweroff'
a pworeoff='poweroff'
a powreoff='poweroff'
a oweroff='poweroff'

# w3m
a w3m='w3m -no-mouse'
ddg() {
    w3m ddg.gg?q=$(urlencodeplus "$@")
}

# xrandr
a tolap="xrandr --output HDMI-1 --off --output eDP-1 --auto --mode 1366x768 --panning 1366x768"
a tomirror="xrandr --output HDMI-1 --mode 1366x768 --output eDP-1 --same-as HDMI-1"

# feh
a feh='feh --force-aliasing --scale-down'
a rndbkgd="feh --randomize --bg-fill ~/Pictures/photos/*"
a difbkgd="rndbkgd"

# zathura
a zath=zathura
a z=zathura

# systemctl
a renet='systemctl restart NetworkManager.service'
a printer='systemctl start org.cups.cupsd'
a nonet='systemctl stop NetworkManager.service'
a netman='systemctl start NetworkManager.service'
a noprinter='systemctl stop org.cups.cupsd'

# pico8
a p8tool='~/repos/picotool/p8tool'
a pico="pico8"

# rm
a rmrf="rm -rf"
a rmr="rm -r"
a rd="rmdir"

# pass
a pe='pass edit'

# synclient
a mouse='synclient TouchpadOff=0'
a nomouse='synclient TouchpadOff=1'

# sudo
a psudo='sudo env "PATH=$PATH" '
a sudo='sudo '

# publish
a listchinesefonts='fc-list :lang=zh'
a markdowntopdf='pandoc --pdf-engine=xelatex -V CJKmainfont="Source Han Sans CN" -o' # outputfile then input file.
viewmarkdown() { md2html $1 | qutepipe }
a vm='viewmarkdown'
a qb='qutebrowser'

# concards
a cards="cd ~/sync/alan/diary/cards"
a ca="cards"
a cnc="concards ~/sync/alan/diary"

# list things for fzf
_fzf_compgen_path() { fd -t f -t d . "$1" }
a fzf='fzf --height 40% --reverse'
a kbf_git_branch="git branch -a | sed 's/^ *//g' | grep -v '*'"
a kbf_ssh_hosts="sed -rn 's/^\s*Host\s+(.*)$/\1/ip' ~/.ssh/config ~/.ssh/local_ssh 2> /dev/null | xargs -n1"

# Thank you: https://gist.github.com/igemnace/9b6fb8c2885c3e35299b3a122e1009e5
a fzf_apropos='apropos "." 2> /dev/null | cut -f 1 -d "(" | uniq | fzf'

# clipboard
a ccl=cclip
a pcl=pclip

# xargs
a xargs='xargs '
a x='xargs '

trim() { awk '{gsub(/^ +| +$/,"")}{print}' }

# My hacky way to make a video 2x speed.
# vidspeed <input-file> <output-file>
doublespeed() {
    mencoder -speed 2 -o ".tmp-$2" -oac pcm -ovc lavc "$1"
    ffmpeg -vn -i ".tmp-$2" ".tmp-old-$2.wav"
    sox ".tmp-old-$2.wav" ".tmp-$2.wav" pitch -1200
    mencoder -ovc copy -oac copy -audiofile ".tmp-$2.wav" ".tmp-$2" -o "$2"
    rm ".tmp-old-$2.wav" ".tmp-$2" ".tmp-$2.wav"
}

# pico8 workflow commands
a pc="pico-compile"
a pw="pico-watch"

# gpg
a gpglk='gpg --list-keys --with-subkey-fingerprints --with-keygrip'
a gpgek='gpg --armor --export'
a gpgfgk='gpg --full-generate-key'

# rg
fnam() { local filename=$(basename -- $1); echo "${filename%.*}"; }
enam() { local filename=$(basename -- $1); echo $([[ "$filename" = *.* ]] && echo ".${filename##*.}" || echo ''); }

a rgl='rg -l'
a rgc='rg --color always'
rr() { rg "$1" "${@:3}" -l | xargs sed -Ei "s^$1^$2^g" }
rgf() { rg "$1"; fd -t f -s "$1" }

# Mv a file local to its directory.
rmv() { mv "$1" "$(dirname $1)/$2" }
rcp() { cp $1 "$(dirname $1)/$2" } # Cp a file local to its directory.
sw() { tf=$(mktemp $(dirname "$1")/XXXXXX) && mv "$1" "$tf" && mv "$2" "$1" &&  mv "$tf" "$2" }

# Networking Notes
# find which domain names are used for an IP with "nslookup"

# human readable flags
a free='free -h'
a du='du -h'
a df='df -h'

# random
ssht() { ssh $1 -t 'tmux attach 2> /dev/null || tmux 2> /dev/null || zsh 2> /dev/null || bash 2> /dev/null' "${@:2}" }
ttt() { [[ -n $1 ]] && while true; do sleep 1s; ttrack rec $1 2s; done || echo 'Requires argument for group' }
a tt='ttrack'
a bat='bat -p --color always'
a b='bat'
a pomo='while true; do echo "WORK TIME"; sleep 25m; speak "timez up... break time" > /dev/null 2>&1; echo "BREAK TIME"; sleep 5m; speak "timez up... start working again" > /dev/null 2>&1; done'
a u='echo -e "$(whoami)@$(hostname)"'
a bn='basename'
a p='pwd'
a wai=whoami
a lam='lookatme --live -e terminal'
a pipi='pip install --user'
a bc='bc -q'
a dd='dd status=progress'
a emacs='emacs -nw'
a fb="~/repos/fuzzybird/fuzzybird.py --hashtag"
a int='sudo wifi-menu'
a lid="echo locked > '/tmp/.lid-lock-file'"
a lock="physlock"
a pavucontrol="ncpamixer"
a pinger='ping www.google.com'
a renginx="sudo nginx -s reload"
a r='ranger'
a ta='tmux attach'
a updatexterm='xrdb merge ~/.Xresources'
a watch='watch -c -d'
a daet='date'
a slblk='lsblk'
a repinyin='repelify pinyin'

# Turns any command into a repl!
repelify() {
    if [[ -z $1 ]]; then echo 'No command provided'; return; fi
    printf '-> '
    while read -r line; do
        cat <<< "$line" | $*
        printf '-> '
    done
}
