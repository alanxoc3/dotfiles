hook global InsertChar k %{ try %{
      exec -draft hH <a-k>jk<ret> d
        exec <esc>
}}

# Hacky way to disable the startup message on the scratch screen.
set-option global startup_info_version 99999999

# No picture of clippy.
set-option global ui_options ncurses_assistant=none

# Disable mouse support.
set-option -add global ui_options ncurses_enable_mouse=off

# Remove the scratch buffer message.
hook global BufCreate \*scratch\* %{
    execute-keys Ged <esc>
}

eval %sh{kak-lsp --kakoune -s $kak_session}
hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp) %{
    lsp-enable-window
}

# Fzf Kak Configuration
source "%val{config}/fzf/fzf.kak"
source "%val{config}/fzf/fzf-file.kak"
source "%val{config}/fzf/fzf-buffer.kak"
source "%val{config}/fzf/fzf-commands.kak"

require-module fzf

# --- USER BINDINGS ---
# Clipboard management.
map global user y '<a-|>cclip<ret>'
map global user p '<|>pclip<ret>'

map global user g ': fzf-grep<ret>'

# Formatting text.
try %{ declare-user-mode text }
define-command -docstring "Enter text-mode.
Text mode contains keybindings for different methods to format highlighted text." \
text-mode %{ evaluate-commands 'enter-user-mode text' }

map -docstring 'Enter Text Mode' global user t ': text-mode<ret>'
map -docstring 'Format a paragraph to respect the 80 character limit.' global text p '<|>tr "\n" " " | fold -s | awk "{\$1=\$1};1"<ret>'

map -docstring 'Fzf mode' global user f ': fzf-mode<ret>'
