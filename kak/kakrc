# Hacky way to disable the startup message on the scratch screen.
set-option global startup_info_version 99999999

# Comment out for demos. Shows all key presses.
# set-option global autoinfo command|onkey|normal

# No picture of clippy.
set-option global ui_options ncurses_assistant=none

# Disable mouse support.
set-option -add global ui_options terminal_enable_mouse=false

# Remove the scratch buffer message.
hook global BufCreate \*scratch\* %{
    execute-keys Ged <esc>
}

eval %sh{kak-lsp --kakoune -s $kak_session}
hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp) %{
    lsp-enable-window
}

# idk... recommended mappings: https://github.com/kak-lsp/kak-lsp
map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object e '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'

# --- USER BINDINGS ---
# Clipboard management.
map global user y '<a-|> ccl<ret>'
map global user p '<|> pcl<ret>'

map -docstring 'enter fzf-mode' global user f ': fzf-mode<ret>'
map -docstring 'next buffer' global user n ': bn<ret>'
map -docstring 'prev buffer' global user N ': bp<ret>'
map -docstring 'delete buffer' global user d ': db<ret>'
map -docstring 'enter text-mode' global user t ': text-mode<ret>'

# Record time for the current file.
hook global -group ttrack RawKey . %{
  evaluate-commands %sh{
    {
      [[ $(basename $kak_bufname) =~ '.' ]] && ttrack_name="ext:${kak_bufname##*.}" || ttrack_name="misc"
      [ ! -z "$(command -v ttrack)" ] && ttrack rec "kak/$ttrack_name" 3s
    } > /dev/null 2>&1 < /dev/null &
  }
}

hook global BufCreate .+\.tt %{
    remove-hooks global ttrack
}

set global tabstop 4
set global indentwidth 4

remove-hooks global expandtab
hook -group expandtab global InsertChar '\t' %{ execute-keys -draft h@ }
hook -group expandtab global InsertKey <backspace> %{ try %{
    execute-keys -draft <a-h><a-k> "^\h+.\z" <ret>I<space><esc><lt>
}}
set-option global aligntab false
